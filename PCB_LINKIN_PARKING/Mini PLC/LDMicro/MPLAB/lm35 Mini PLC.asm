;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F887 is the LDmicro target processor.
	LIST    p=PIC16F887
#include P16F887.inc
	__CONFIG 0x2007, 0x3F72
	__CONFIG 0x2008, 0x0
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000138	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x25            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x24            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	; '\xBF'  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	; '\x86'  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	; '\xDB'  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	; '\xCF'  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	; '\xE6'  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	; '\xED'  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	; '\xFD'  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	; '\x87'  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	; '\xFF'  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	; '\xEF'  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	; '\xF7'  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	; '\xFC'  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	; '\xB9'  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	; '\xDE'  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	; '\xF9'  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	; '\xF1'  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	; '\xB0'  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	; '"'  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	; 'N'  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	; '\xD2'  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	; '\xDA'  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	; 'r'  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	; 'p'  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	; '\x0C'  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	; '@'  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	; '\x80'  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	; 'R'  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	; '\x09'  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	; '\x0D'  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	; 'a'  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	; 'A'  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	; 'C'  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	; '\xD3'  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	; '\x9F'  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	; '='  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	; '\x1E'  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	; '8'  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	; '3'  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	; 'd'  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	; '#'  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	; '\x08'  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	; '_'  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	; 'X'  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	; '{'  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	; '\x10'  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	; '\x0E'  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	; '\x18'  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	; 'P'  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	; '\x01'  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	; 'c'  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000091: clrf	 0x29            	  ; (OP_CLRF, result3)
          clrf	 0x28            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_000098: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000a0	 	  ; (OP_GOTO, dontAdd)
          movf	 0x24            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x25            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_0000a0: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x29            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x30            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000098	 	  ; (OP_GOTO, top)
i_0000a7: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x2A            	  ; (OP_CLRF, result4)
          clrf	 0x29            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_0000b0: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000b8	 	  ; (OP_GOTO, dontAdd)
          movf	 0x24            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x25            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x25            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_0000b8: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x2A            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x29            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x30            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_0000b0	 	  ; (OP_GOTO, top)
i_0000c0: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_0000c1: movf	 0x25            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, sign)
          btfss	 0x29            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_0000cb	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x28            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x29            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x28            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x29            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_0000cb: btfss	 0x25            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_0000d2	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_0000d2: clrf	 0x2B            	  ; (OP_CLRF, remainder1)
          clrf	 0x2A            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_0000d7: rlf	 0x24            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x25            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x30            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000f0	 	  ; (OP_GOTO, done)
          rlf	 0x2A            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x2B            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x2B            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000ee	 	  ; (OP_GOTO, notNegative)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x2B            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x2B            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000ed: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000ee: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000ef: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000f0: btfss	 0x23            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000f7: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x26            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, sign)
i_0000fb: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0000fc: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x29            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000104	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x28            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x29            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x28            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x29            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000104: btfss	 0x26            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_00010e	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x26            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_00010e: clrf	 0x2B            	  ; (OP_CLRF, remainder1)
          clrf	 0x2A            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_000113: rlf	 0x24            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x25            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x26            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x30            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_00012d	 	  ; (OP_GOTO, done)
          rlf	 0x2A            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x2B            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x2B            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_00012b	 	  ; (OP_GOTO, notNegative)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x2B            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x2B            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_00012a: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012b: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_00012c: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012d: btfss	 0x23            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x26            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_000137: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000138: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0xC4             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0xC4
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x09             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x9
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000149: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000149	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          bsf	 0x03            , 6	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
          bcf	 0x03            , 5	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x8
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x09            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x9
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBA             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBA
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
          movlw	 0x7F             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x7F
          movwf	 0x08            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x88
          movlw	 0xFC             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFC
          movwf	 0x09            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x89
    ; UART setup
          movlw	 0x19             	  ; (REG_SPBRG, divisor & 0xFF) ; 0x19
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, (1 << TXEN) | (brgh << BRGH)) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, (1 << TXEN) | (brgh << BRGH)) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_00016f: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x35            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x35            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_000173: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_000173	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT VARS
    ; INT_IF_BIT_CLEAR $once_0_INIT_VARS
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_INIT_VARS
          goto	 l_00017b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_INIT_VARS
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_INIT_VARS
    ; INT_SET_VARIABLE_TO_LITERAL Ccount3:=0x0(0)
    ; CopyLitToReg
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; Ccount3(0x36):=0(0x0)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
l_00017b: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000180	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x88) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISD:=0x0(0)
    ; CopyLitToReg
          clrf	 0x08            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISD(0x88):=0(0x0)
l_000180: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000185	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x89) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISE:=0x0(0)
    ; CopyLitToReg
          clrf	 0x09            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISE(0x89):=0(0x0)
l_000185: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T5m 5000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001b1	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T5m 1
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T5m
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00019b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00019b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00019b: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001a0	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_00019f: goto	 l_0001a2	 	  ; (OP_GOTO, isEnd)
l_0001a0: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0001a2: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001a5	 	  ; (OP_GOTO, ifThen)
i_0001a4: goto	 l_0001a7	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T5m overlap to  overflow to 
l_0001a5: incf	 0x37            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T5m
i_0001a6: goto	 l_0001ad	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T5m:=0x0(0)
    ; CopyLitToReg
l_0001a7: clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T5m(0x37):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T5m
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T5m
          goto	 l_0001ac	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T5m
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T5m
i_0001ab: goto	 l_0001ad	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T5m
l_0001ac: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T5m
    ; INT_IF_BIT_CLEAR $once_1_TCY_T5m
l_0001ad: btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T5m
          goto	 l_0001b0	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_0001b0: goto	 l_0001b2	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T5m:=0x0(0)
    ; CopyLitToReg
l_0001b1: clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T5m(0x37):=0(0x0)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT RDigito:=$rung_top
l_0001b2: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_READ_ADC
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001d8	 	  ; (OP_GOTO, condFalse)
    ; INT_READ_ADC
          movlw	 0x89             	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x89
          movwf	 0x1F            	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x1F
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          movlw	 0xFF             	  ; (REG_ANSEL, 0xff) ; 0xFF
          movwf	 0x08            	  ; (REG_ANSEL, 0xff) ; 0x188
          movlw	 0x3F             	  ; (REG_ANSELH, 0x3f) ; 0x3F
          movwf	 0x09            	  ; (REG_ANSELH, 0x3f) ; 0x189
          bcf	 0x03            , 5	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP1)
          movlw	 0x1A             	  ; (OP_MOVLW, cyclesToWait)
          movwf	 0x25            	  ; (OP_MOVWF, Scratch1)
l_0001c7: decfsz 0x25            , 1	  ; (OP_DECFSZ, Scratch1, DEST_F)
          goto	 l_0001c7	 	  ; (OP_GOTO, wait)
          bsf	 0x1F            , 1	  ; (OP_BSF, REG_ADCON0, goPos)
l_0001ca: btfsc	 0x1F            , 1	  ; (OP_BTFSC, REG_ADCON0, goPos)
          goto	 l_0001ca	 	  ; (OP_GOTO, spin)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESH, DEST_W)
          movwf	 0x39            	  ; (OP_MOVWF, addr1 + 1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9E) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESL, DEST_W)
          bcf	 0x03            , 5	  ;  BS(0x80,0x38) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movwf	 0x38            	  ; (OP_MOVWF, addr1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
l_0001d8: bcf	 0x03            , 5	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T1s 1000000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00020f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T1s 200
    ; CopyRegToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xC8             	  ; (OP_MOVLW, lNow, 0, comment) ; 200
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 200
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 200
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0001f6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0001f6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0001f6: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001fb	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0001fa: goto	 l_0001fd	 	  ; (OP_GOTO, isEnd)
l_0001fb: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0001fd: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000200	 	  ; (OP_GOTO, ifThen)
i_0001ff: goto	 l_000204	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T1s overlap to  overflow to 
l_000200: incf	 0x3A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T1s
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x3B            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; T1s
i_000203: goto	 l_00020b	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_000204: clrf	 0x3A            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3A):=0(0x0)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3A):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_2_TCY_T1s
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T1s
          goto	 l_00020a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_2_TCY_T1s
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_TCY_T1s
i_000209: goto	 l_00020b	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_TCY_T1s
l_00020a: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_TCY_T1s
    ; INT_IF_BIT_CLEAR $once_2_TCY_T1s
l_00020b: btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T1s
          goto	 l_00020e	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_00020e: goto	 l_000211	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_00020f: clrf	 0x3A            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3A):=0(0x0)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3A):=0(0x0)
    ; ELEM_CTU
    ; INT_IF_BIT_SET $rung_top
l_000211: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000234	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_3_CTU_Ccount3
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
          goto	 l_000233	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_3_CTU_Ccount3
          bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
    ; INT_IF_LES Ccount3 3
    ; CopyRegToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ccount3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000228	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000228	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000228: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00022d	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_00022c: goto	 l_00022f	 	  ; (OP_GOTO, isEnd)
l_00022d: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_00022f: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000232	 	  ; (OP_GOTO, ifThen)
i_000231: goto	 l_000233	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE Ccount3 overlap to  overflow to 
l_000232: incf	 0x36            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Ccount3
l_000233: goto	 l_000235	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_3_CTU_Ccount3
l_000234: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
    ; INT_IF_LES Ccount3 3
    ; CopyRegToReg
l_000235: movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ccount3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000247	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000247	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000247: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00024c	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_00024b: goto	 l_00024e	 	  ; (OP_GOTO, isEnd)
l_00024c: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_00024e: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000251	 	  ; (OP_GOTO, ifThen)
i_000250: goto	 l_000253	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000251: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_000252: goto	 l_000254	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $rung_top
l_000253: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_000254: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT R3s:=$parThis_0
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_RES
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00025f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Ccount3:=0x0(0)
    ; CopyLitToReg
          clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; Ccount3(0x36):=0(0x0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_00025f: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000319	 	  ; (OP_GOTO, condFalse)
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN2 381
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x7D             	  ; (OP_MOVLW, lNow, 0, comment) ; 381
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 381
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 381
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 381
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00027d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00027d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00027d: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000282	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000281: goto	 l_000284	 	  ; (OP_GOTO, isEnd)
l_000282: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000284: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000287	 	  ; (OP_GOTO, ifThen)
i_000286: goto	 l_000288	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000287: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000288: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0002be	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Valor := AAN2 - 190; ''; ''
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_MULTIPLY Valor := Valor * 75
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_DIVIDE Valor := Valor / 190
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
i_0002ae: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002af: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_ADD Valor := Valor + 75; ''; ''
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3C            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3D            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_0002be: bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN2 191
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBF             	  ; (OP_MOVLW, lNow, 0, comment) ; 191
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 191
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 191
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0002d0: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002d1: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002da	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002da	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002da: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002df	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0002de: goto	 l_0002e1	 	  ; (OP_GOTO, isEnd)
l_0002df: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0002e1: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002e4	 	  ; (OP_GOTO, ifThen)
i_0002e3: goto	 l_0002e5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0002e4: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0002e5: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000319	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Valor := AAN2 - 0; ''; ''
    ; CopyRegToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_MULTIPLY Valor := Valor * 75
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_DIVIDE Valor := Valor / 190
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
i_00030a: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00030b: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Valor
    ; INT_SET_VARIABLE_ADD Valor := Valor + 0; ''; ''
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3C            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3D            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_000319: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00031a: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00031b: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R3s
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R3s
          goto	 l_00031f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
l_00031f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000331	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=10(0xA)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Dezena := Valor / $scratch2
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x43            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
l_000331: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_000332: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000333: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R3s
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R3s
          goto	 l_000337	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_MOD
    ; INT_IF_BIT_SET $rung_top
l_000337: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000349	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x40):=10(0xA)
          movwf	 0x40            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
          clrf	 0x41            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x40):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Unidade := Valor / $scratch2
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x40            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x2A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x44            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
          movf	 0x2B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x45            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_000349: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00034a: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00034b: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET RDigito
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; RDigito
          goto	 l_00034f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_00034f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0003b8	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=176(0xB0)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=176(0xB0)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x42            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x46            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000360	 	  ; (OP_GOTO, ifEnd)
          movf	 0x43            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x47            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000360	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x42):=128(0x80)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x42):=128(0x80)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x42):=128(0x80)
i_00035f: goto	 l_0003ad	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Dezena 0
    ; CopyRegToReg
l_000360: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000378	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000378	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000378: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00037d	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_00037c: goto	 l_00037f	 	  ; (OP_GOTO, isEnd)
l_00037d: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_00037f: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000382	 	  ; (OP_GOTO, ifThen)
i_000381: goto	 l_000386	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x20(32)
    ; CopyLitToReg
l_000382: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x42):=32(0x20)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x42):=32(0x20)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x42):=32(0x20)
i_000385: goto	 l_0003ad	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Dezena 129
    ; CopyRegToReg
l_000386: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00039f	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00039f	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00039f: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003a4	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0003a3: goto	 l_0003a6	 	  ; (OP_GOTO, isEnd)
l_0003a4: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0003a6: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003a9	 	  ; (OP_GOTO, ifThen)
i_0003a8: goto	 l_0003aa	 	  ; (OP_GOTO, ifEnd)
l_0003a9: goto	 l_0003ad	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x20(32)
    ; CopyLitToReg
l_0003aa: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x42):=32(0x20)
          movwf	 0x42            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x42):=32(0x20)
          clrf	 0x43            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x42):=32(0x20)
    ; Scratch0:1 := Index 'Dezena'
    ; CopyRegToReg
l_0003ad: movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x43            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x46            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x47            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x46            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x47            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0003b8: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_0003bc: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003bd: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0003c2	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye0
          bcf	 0x09            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye0
i_0003c1: goto	 l_0003c3	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye0
l_0003c2: bsf	 0x09            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye0
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0003c3: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_OPEN
    ; INT_CLEAR_BIT $parThis_1
          bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_1
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0003cc	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yd7
          bcf	 0x08            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; Yd7
i_0003cb: goto	 l_0003cd	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Yd7
l_0003cc: bsf	 0x08            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; Yd7
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0003cd: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye0:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x21            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR RDigito
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; RDigito
          goto	 l_0003dc	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_0003dc: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000445	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=176(0xB0)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=176(0xB0)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x44            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x46            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003ed	 	  ; (OP_GOTO, ifEnd)
          movf	 0x45            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x47            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0003ed	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x44):=128(0x80)
          movwf	 0x44            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x44):=128(0x80)
          clrf	 0x45            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x44):=128(0x80)
i_0003ec: goto	 l_00043a	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Unidade 0
    ; CopyRegToReg
l_0003ed: movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000405	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000405	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000405: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00040a	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000409: goto	 l_00040c	 	  ; (OP_GOTO, isEnd)
l_00040a: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_00040c: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00040f	 	  ; (OP_GOTO, ifThen)
i_00040e: goto	 l_000413	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x20(32)
    ; CopyLitToReg
l_00040f: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x44):=32(0x20)
          movwf	 0x44            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x44):=32(0x20)
          clrf	 0x45            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x44):=32(0x20)
i_000412: goto	 l_00043a	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Unidade 129
    ; CopyRegToReg
l_000413: movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00042c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00042c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00042c: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000431	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000430: goto	 l_000433	 	  ; (OP_GOTO, isEnd)
l_000431: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000433: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000436	 	  ; (OP_GOTO, ifThen)
i_000435: goto	 l_000437	 	  ; (OP_GOTO, ifEnd)
l_000436: goto	 l_00043a	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x20(32)
    ; CopyLitToReg
l_000437: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x44):=32(0x20)
          movwf	 0x44            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x44):=32(0x20)
          clrf	 0x45            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x44):=32(0x20)
    ; Scratch0:1 := Index 'Unidade'
    ; CopyRegToReg
l_00043a: movf	 0x44            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x45            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x46            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x47            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x46            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x47            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_000445: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_000449: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00044a: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_2
          btfss	 0x21            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_00044f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye1
          bcf	 0x09            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye1
i_00044e: goto	 l_000450	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye1
l_00044f: bsf	 0x09            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye1
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_000450: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye1:=$parThis_2
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x21            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 10 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_UART_RECV_AVAIL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000462	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_000462: bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_RECV
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_00047e	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_00047e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL char:=0x0(0)
    ; CopyLitToReg
          clrf	 0x48            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x48):=0(0x0)
          clrf	 0x49            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x48):=0(0x0)
    ; INT_UART_RECV1
          btfss	 0x0C            , 5	  ; (OP_BTFSS, REG_PIR1, 5)
          goto	 l_00047e	 	  ; (OP_GOTO, done)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movwf	 0x48            	  ; (OP_MOVWF, addr1)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, REG_RCSTA, 1)
          goto	 l_00047a	 	  ; (OP_GOTO, yesError)
          btfsc	 0x18            , 2	  ; (OP_BTFSC, REG_RCSTA, 2)
          goto	 l_00047a	 	  ; (OP_GOTO, yesError)
i_000479: goto	 l_00047e	 	  ; (OP_GOTO, done)
l_00047a: movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          bcf	 0x18            , 4	  ; (OP_BCF, REG_RCSTA, 4)
          bsf	 0x18            , 4	  ; (OP_BSF, REG_RCSTA, 4)
    ; INT_IF_BIT_SET $parThis_3
l_00047e: btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_000481	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_000481: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_00048e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_4_FMTD_STR
          btfsc	 0x21            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_4_FMTD_STR
          goto	 l_00048d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_4_FMTD_STR
          bsf	 0x21            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_4_FMTD_STR
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_0_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x4A):=0(0x0)
          clrf	 0x4B            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x4A):=0(0x0)
    ; INT_SET_BIT $fmtd_3_doSend
          bsf	 0x21            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_3_doSend
l_00048d: goto	 l_00048f	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_4_FMTD_STR
l_00048e: bcf	 0x21            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_4_FMTD_STR
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_0_seq
    ; CopyRegToReg
l_00048f: movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_0_seq 12
    ; CopyRegToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004ac	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004ac	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004ac: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004b1	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0004b0: goto	 l_0004b3	 	  ; (OP_GOTO, isEnd)
l_0004b1: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0004b3: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004b6	 	  ; (OP_GOTO, ifThen)
i_0004b5: goto	 l_0004b7	 	  ; (OP_GOTO, ifEnd)
l_0004b6: goto	 l_0004ba	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_0004b7: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_0004ba: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_0004cb	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x21) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_0004cb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_0004cb: clrf	 0x46            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004d8	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004d8	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x76(118)
    ; CopyLitToReg
          movlw	 0x76             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=118(0x76)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_0004d8: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004e6	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004e6	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=97(0x61)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_0004e6: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=2(0x2)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004f4	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004f4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6C(108)
    ; CopyLitToReg
          movlw	 0x6C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_0004f4: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=3(0x3)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000502	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000502	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x75(117)
    ; CopyLitToReg
          movlw	 0x75             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=117(0x75)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=117(0x75)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=117(0x75)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_000502: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=4(0x4)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000510	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000510	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x65(101)
    ; CopyLitToReg
          movlw	 0x65             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=101(0x65)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=101(0x65)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=101(0x65)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_000510: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=5(0x5)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00051e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00051e	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3A(58)
    ; CopyLitToReg
          movlw	 0x3A             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=58(0x3A)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=58(0x3A)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=58(0x3A)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_00051e: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=6(0x6)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00052c	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00052c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=32(0x20)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_00052c: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=7(0x7)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000539	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000539	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000539: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00057f	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_1_convertState := var
    ; CopyRegToReg
          movf	 0x52            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; var
          movwf	 0x50            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
          movf	 0x53            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; var
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
    ; INT_SET_BIT $fmtd_2_isLeadingZero
          bsf	 0x21            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x64(100)
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=100(0x64)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=100(0x64)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=100(0x64)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000558: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000559: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x50            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x51            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000570: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000571: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00057e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00057e	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_2_isLeadingZero
          btfss	 0x21            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
          goto	 l_00057d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=32(0x20)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
l_00057d: goto	 l_00057f	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_2_isLeadingZero
l_00057e: bcf	 0x21            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_00057f: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=8(0x8)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00058c	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00058c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_00058c: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0005cd	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=10(0xA)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_0005a6: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0005a7: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x50            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x51            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_0005be: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0005bf: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005cc	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005cc	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_2_isLeadingZero
          btfss	 0x21            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
          goto	 l_0005cb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=32(0x20)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
l_0005cb: goto	 l_0005cd	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_2_isLeadingZero
l_0005cc: bcf	 0x21            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_0005cd: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=9(0x9)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005da	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0005da	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0005da: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00060a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x51            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_0005f4: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0005f5: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x50            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x51            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_00060a: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=10(0xA)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_00060f: bcf	 0x0A            , 3	  ;  PS(0x18,0x06) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000610: bcf	 0x0A            , 4	  ;  PS(0x18,0x06) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00061a	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00061a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xD(13)
    ; CopyLitToReg
          movlw	 0x0D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=13(0xD)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=13(0xD)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=13(0xD)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB(11)
    ; CopyLitToReg
l_00061a: movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=11(0xB)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=11(0xB)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=11(0xB)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000628	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000628	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=10(0xA)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=10(0xA)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=10(0xA)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_000628: movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000640	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000640	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000640: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000645	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000644: goto	 l_000647	 	  ; (OP_GOTO, isEnd)
l_000645: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000647: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00064a	 	  ; (OP_GOTO, ifThen)
i_000649: goto	 l_00064b	 	  ; (OP_GOTO, ifEnd)
l_00064a: goto	 l_000656	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_00064b: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_000656	 	  ; (OP_GOTO, condFalse)
l_00064d: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_00064d	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x4E) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_0_seq overlap to  overflow to 
          incf	 0x4A            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_0_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x4B            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_0_seq
    ; INT_CLEAR_BIT $parThis_3
l_000656: bcf	 0x21            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_3
    ; INT_IF_LES $fmtd_0_seq 12
    ; CopyRegToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000670	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000670	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000670: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000675	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000674: goto	 l_000677	 	  ; (OP_GOTO, isEnd)
l_000675: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000677: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00067a	 	  ; (OP_GOTO, ifThen)
i_000679: goto	 l_00067e	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_00067a: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_00067d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parThis_3
          bsf	 0x21            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_3
l_00067d: goto	 l_00067f	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_3_doSend
l_00067e: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_3_doSend
    ; INT_IF_BIT_SET $parThis_3
l_00067f: btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_000682	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_000682: btfsc	 0x21            , 3	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x21            , 3	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 11 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R3s
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R3s
          goto	 l_00068a	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_1
l_00068a: bcf	 0x22            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_0006b1	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Valor 9
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 9
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3D            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3C            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x3D            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x3D            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006a6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3D            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006a6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0006a6: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0006ab	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0006aa: goto	 l_0006ad	 	  ; (OP_GOTO, isEnd)
l_0006ab: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0006ad: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0006b0	 	  ; (OP_GOTO, ifThen)
i_0006af: goto	 l_0006b1	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_4
l_0006b0: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $parThis_4
l_0006b1: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_0006ba	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_5_FMTD_STR
          btfsc	 0x22            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_5_FMTD_STR
          goto	 l_0006b9	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_5_FMTD_STR
          bsf	 0x22            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_5_FMTD_STR
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_4_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x54            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_4_seq(0x54):=0(0x0)
          clrf	 0x55            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_4_seq(0x54):=0(0x0)
    ; INT_SET_BIT $fmtd_7_doSend
          bsf	 0x22            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_7_doSend
l_0006b9: goto	 l_0006bb	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_5_FMTD_STR
l_0006ba: bcf	 0x22            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_5_FMTD_STR
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_4_seq
    ; CopyRegToReg
l_0006bb: movf	 0x54            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_4_seq 11
    ; CopyRegToReg
          movf	 0x54            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006d8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006d8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0006d8: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0006dd	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0006dc: goto	 l_0006df	 	  ; (OP_GOTO, isEnd)
l_0006dd: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0006df: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0006e2	 	  ; (OP_GOTO, ifThen)
i_0006e1: goto	 l_0006e3	 	  ; (OP_GOTO, ifEnd)
l_0006e2: goto	 l_0006e6	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_0006e3: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_0006e6: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_0006f7	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x21) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_0006f7	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_0006f7: clrf	 0x46            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000704	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000704	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6E(110)
    ; CopyLitToReg
          movlw	 0x6E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=110(0x6E)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=110(0x6E)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=110(0x6E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_000704: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000712	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000712	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=48(0x30)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=48(0x30)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=48(0x30)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_000712: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=2(0x2)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000720	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000720	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x2E(46)
    ; CopyLitToReg
          movlw	 0x2E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=46(0x2E)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=46(0x2E)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=46(0x2E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_000720: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=3(0x3)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00072e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00072e	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x76(118)
    ; CopyLitToReg
          movlw	 0x76             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=118(0x76)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_00072e: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=4(0x4)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00073c	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00073c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=97(0x61)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_00073c: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=5(0x5)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00074a	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00074a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6C(108)
    ; CopyLitToReg
          movlw	 0x6C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_00074a: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=6(0x6)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000758	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000758	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3D(61)
    ; CopyLitToReg
          movlw	 0x3D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=61(0x3D)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=61(0x3D)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=61(0x3D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_000758: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=7(0x7)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000765	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000765	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000765: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00079a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_5_convertState := Valor
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x56            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_5_convertState
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x57            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_5_convertState
    ; INT_SET_BIT $fmtd_6_isLeadingZero
          bsf	 0x22            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_6_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_5_convertState / $scratch
    ; CopyRegToReg
          movf	 0x56            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000784: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000785: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_5_convertState := $fmtd_5_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x56            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x57            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_00079a: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=8(0x8)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_00079f: bcf	 0x0A            , 3	  ;  PS(0x18,0x07) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0007a0: bcf	 0x0A            , 4	  ;  PS(0x18,0x07) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007aa	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007aa	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_0007aa: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=9(0x9)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007b8	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007b8	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_0007b8: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=10(0xA)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007c6	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007c6	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_0007c6: movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0007de	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0007de	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0007de: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0007e3	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0007e2: goto	 l_0007e5	 	  ; (OP_GOTO, isEnd)
l_0007e3: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0007e5: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0007e8	 	  ; (OP_GOTO, ifThen)
i_0007e7: goto	 l_0007e9	 	  ; (OP_GOTO, ifEnd)
l_0007e8: goto	 l_0007f4	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_0007e9: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_0007f4	 	  ; (OP_GOTO, condFalse)
l_0007eb: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0007eb	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x4E) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_4_seq overlap to  overflow to 
          incf	 0x54            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_4_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x55            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_4_seq
    ; INT_CLEAR_BIT $parThis_4
l_0007f4: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; INT_IF_LES $fmtd_4_seq 11
    ; CopyRegToReg
          movf	 0x54            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x55            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_000806: bsf	 0x0A            , 3	  ;  PS(0x07,0x08) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00080f	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00080f	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00080f: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000814	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000813: goto	 l_000816	 	  ; (OP_GOTO, isEnd)
l_000814: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000816: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000819	 	  ; (OP_GOTO, ifThen)
i_000818: goto	 l_00081d	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_000819: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_00081c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parThis_4
          bsf	 0x22            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_4
l_00081c: goto	 l_00081e	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_7_doSend
l_00081d: bcf	 0x22            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_7_doSend
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_4
l_00081e: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000821	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x22            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000821: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_00084b	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Valor 10
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 10
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000840	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000840	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000840: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000845	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000844: goto	 l_000847	 	  ; (OP_GOTO, isEnd)
l_000845: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000847: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00084a	 	  ; (OP_GOTO, ifThen)
i_000849: goto	 l_00084b	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_4
l_00084a: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $parThis_4
l_00084b: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000854	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_6_FMTD_STR
          btfsc	 0x22            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_6_FMTD_STR
          goto	 l_000853	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_6_FMTD_STR
          bsf	 0x22            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_6_FMTD_STR
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_8_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x58            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_8_seq(0x58):=0(0x0)
          clrf	 0x59            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_8_seq(0x58):=0(0x0)
    ; INT_SET_BIT $fmtd_b_doSend
          bsf	 0x22            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_b_doSend
l_000853: goto	 l_000855	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_6_FMTD_STR
l_000854: bcf	 0x22            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_6_FMTD_STR
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_8_seq
    ; CopyRegToReg
l_000855: movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_8_seq 12
    ; CopyRegToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000872	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000872	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000872: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000877	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_000876: goto	 l_000879	 	  ; (OP_GOTO, isEnd)
l_000877: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_000879: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00087c	 	  ; (OP_GOTO, ifThen)
i_00087b: goto	 l_00087d	 	  ; (OP_GOTO, ifEnd)
l_00087c: goto	 l_000880	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_00087d: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_b_doSend
l_000880: btfss	 0x22            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_b_doSend
          goto	 l_000891	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x21) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_000891	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x4C):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_000891: clrf	 0x46            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=0(0x0)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00089e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00089e	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6E(110)
    ; CopyLitToReg
          movlw	 0x6E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=110(0x6E)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=110(0x6E)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=110(0x6E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_00089e: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ac	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ac	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=48(0x30)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=48(0x30)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=48(0x30)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_0008ac: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=2(0x2)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=2(0x2)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ba	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ba	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x2E(46)
    ; CopyLitToReg
          movlw	 0x2E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=46(0x2E)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=46(0x2E)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=46(0x2E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_0008ba: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=3(0x3)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=3(0x3)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008c8	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008c8	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x76(118)
    ; CopyLitToReg
          movlw	 0x76             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=118(0x76)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=118(0x76)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_0008c8: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=4(0x4)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=4(0x4)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008d6	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008d6	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=97(0x61)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_0008d6: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=5(0x5)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=5(0x5)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008e4	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008e4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6C(108)
    ; CopyLitToReg
          movlw	 0x6C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=108(0x6C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_0008e4: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=6(0x6)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=6(0x6)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008f2	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008f2	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3D(61)
    ; CopyLitToReg
          movlw	 0x3D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=61(0x3D)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=61(0x3D)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=61(0x3D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_0008f2: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=7(0x7)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=7(0x7)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ff	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ff	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0008ff: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000946	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_9_convertState := Valor
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_9_convertState
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Valor
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_9_convertState
    ; INT_SET_BIT $fmtd_a_isLeadingZero
          bsf	 0x22            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_a_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=10(0xA)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_9_convertState / $scratch
    ; CopyRegToReg
          movf	 0x5A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_9_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_9_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000911: bcf	 0x0A            , 3	  ;  PS(0x08,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00091f: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000920: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_9_convertState := $fmtd_9_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x5A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x5B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000937: bsf	 0x0A            , 3	  ;  PS(0x10,0x09) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_000938: bcf	 0x0A            , 4	  ;  PS(0x10,0x09) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000945	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4F            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000945	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_a_isLeadingZero
          btfss	 0x22            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_a_isLeadingZero
          goto	 l_000944	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=32(0x20)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=32(0x20)
l_000944: goto	 l_000946	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_a_isLeadingZero
l_000945: bcf	 0x22            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_a_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_000946: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=8(0x8)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=8(0x8)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000953	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000953	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000953: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000984	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=1(0x1)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_9_convertState / $scratch
    ; CopyRegToReg
          movf	 0x5A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_9_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_9_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000960: bcf	 0x0A            , 3	  ;  PS(0x09,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4F            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x46            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00096e: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00096f: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x46            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x47            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_9_convertState := $fmtd_9_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x5A            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x5B            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=48(0x30)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x46            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x4E            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x47            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x47            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x4F            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_000984: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=9(0x9)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=9(0x9)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000989: bsf	 0x0A            , 3	  ;  PS(0x10,0x09) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_00098a: bcf	 0x0A            , 4	  ;  PS(0x10,0x09) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000994	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000994	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_000994: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=10(0xA)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=10(0xA)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009a2	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009a2	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB(11)
    ; CopyLitToReg
l_0009a2: movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x46):=11(0xB)
          movwf	 0x46            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x46):=11(0xB)
          clrf	 0x47            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x46):=11(0xB)
    ; INT_IF_EQU
          movf	 0x46            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009b0	 	  ; (OP_GOTO, ifEnd)
          movf	 0x47            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0009b0	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          movwf	 0x4E            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
          clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x4E):=255(0xFF)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_0009b0: movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009c8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009c8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009c8: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009cd	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0009cc: goto	 l_0009cf	 	  ; (OP_GOTO, isEnd)
l_0009cd: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0009cf: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0009d2	 	  ; (OP_GOTO, ifThen)
i_0009d1: goto	 l_0009d3	 	  ; (OP_GOTO, ifEnd)
l_0009d2: goto	 l_0009de	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_b_doSend
l_0009d3: btfss	 0x22            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_b_doSend
          goto	 l_0009de	 	  ; (OP_GOTO, condFalse)
l_0009d5: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0009d5	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x4E) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_8_seq overlap to  overflow to 
          incf	 0x58            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_8_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x59            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_8_seq
    ; INT_CLEAR_BIT $parThis_4
l_0009de: bcf	 0x22            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_4
    ; INT_IF_LES $fmtd_8_seq 12
    ; CopyRegToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_8_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x35            , 1	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009f8	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009f8	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x35            , 1	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009f8: btfss	 0x35            , 1	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009fd	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x35            , 1	  ; (OP_BCF, addrDest, bitDest)
i_0009fc: goto	 l_0009ff	 	  ; (OP_GOTO, isEnd)
l_0009fd: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x35            , 1	  ; (OP_BSF, addrDest, bitDest)
l_0009ff: btfsc	 0x35            , 1	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000a02	 	  ; (OP_GOTO, ifThen)
i_000a01: goto	 l_000a06	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_b_doSend
l_000a02: btfss	 0x22            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_b_doSend
          goto	 l_000a05	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parThis_4
          bsf	 0x22            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_4
l_000a05: goto	 l_000a07	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_b_doSend
l_000a06: bcf	 0x22            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_b_doSend
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_4
l_000a07: btfss	 0x22            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000a0a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_1
          bsf	 0x22            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_1
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_1
l_000a0a: btfsc	 0x22            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x22            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 12 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a1e	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; '0'
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; '0'
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; '0'
          movf	 0x48            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x28            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a1d	 	  ; (OP_GOTO, ifThen)
          movf	 0x49            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x29            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a1d	 	  ; (OP_GOTO, ifThen)
i_000a1c: goto	 l_000a1e	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000a1d: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a1e: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a21	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc0
          bsf	 0x07            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc0
    ; ] finish series
    ; 
    ; ======= START RUNG 13 =======
    ; INT_SET_BIT $rung_top
l_000a21: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a31	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x31             	  ; (OP_MOVLW, lNow, 0, comment) ; '1'
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; '1'
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; '1'
          movf	 0x48            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x28            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a30	 	  ; (OP_GOTO, ifThen)
          movf	 0x49            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x29            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a30	 	  ; (OP_GOTO, ifThen)
i_000a2f: goto	 l_000a31	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000a30: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a31: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a34	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc0
          bcf	 0x07            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc0
    ; ] finish series
    ; 
    ; ======= START RUNG 14 =======
    ; INT_SET_BIT $rung_top
l_000a34: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb2
          btfsc	 0x06            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb2
          goto	 l_000a38	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a38: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a3b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc2
          bsf	 0x07            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc2
    ; ] finish series
    ; 
    ; ======= START RUNG 15 =======
    ; INT_SET_BIT $rung_top
l_000a3b: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb0
          btfsc	 0x06            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb0
          goto	 l_000a3f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a3f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a42	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc2
          bcf	 0x07            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc2
l_000a42: bcf	 0x0A            , 3	  ;  PS(0x0A,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000a43: bcf	 0x0A            , 3	  ;  PS(0x0A,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000a44: goto	 l_00016f	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_000a45: goto	 l_000a45	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 93
;|  2 | #PORTD                                            	|   1 byte  | 0x0008       |
;|  6 | #TRISD                                            	|   1 byte  | 0x0088       |
;|  7 | #TRISE                                            	|   1 byte  | 0x0089       |
;|  9 | $charToUart                                       	|   2 byte  | 0x004E       |
;| 10 | $fmtd_0_seq                                       	|   2 byte  | 0x004A       |
;| 11 | $fmtd_1_convertState                              	|   2 byte  | 0x0050       |
;| 12 | $fmtd_4_seq                                       	|   2 byte  | 0x0054       |
;| 13 | $fmtd_5_convertState                              	|   2 byte  | 0x0056       |
;| 14 | $fmtd_8_seq                                       	|   2 byte  | 0x0058       |
;| 15 | $fmtd_9_convertState                              	|   2 byte  | 0x005A       |
;| 16 | $scratch                                          	|   2 byte  | 0x0046       |
;| 17 | $scratch2                                         	|   2 byte  | 0x0040       |
;| 18 | $seqScratch                                       	|   2 byte  | 0x004C       |
;| 33 | AAN2                                              	|   2 byte  | 0x0038       |
;| 40 | Ccount3                                           	|   1 byte  | 0x0036       |
;| 42 | Dezena                                            	|   2 byte  | 0x0042       |
;| 48 | T1s                                               	|   2 byte  | 0x003A       |
;| 49 | T5m                                               	|   1 byte  | 0x0037       |
;| 52 | Unidade                                           	|   2 byte  | 0x0044       |
;| 53 | Valor                                             	|   2 byte  | 0x003C       |
;| 73 | char                                              	|   2 byte  | 0x0048       |
;| 74 | char7seg                                          	| 129 byte  | 0x0008       |
;| 89 | var                                               	|   2 byte  | 0x0052       |
;| 92 | 190                                               	|   2 byte  | 0x003E       |

;|Internal Relays: 26
;|  0 | $once_0_INIT_VARS                                 	|   1 bit   | 0x0020       | 0     |
;|  1 | $rung_top                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_TCY_T5m                                   	|   1 bit   | 0x0020       | 2     |
;|  3 | RDigito                                           	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_2_TCY_T1s                                   	|   1 bit   | 0x0020       | 4     |
;|  5 | $once_3_CTU_Ccount3                               	|   1 bit   | 0x0020       | 5     |
;|  6 | $parThis_0                                        	|   1 bit   | 0x0020       | 6     |
;|  7 | R3s                                               	|   1 bit   | 0x0020       | 7     |
;|  8 | $scratch                                          	|   1 bit   | 0x0021       | 0     |
;|  9 | $parThis_1                                        	|   1 bit   | 0x0021       | 1     |
;| 10 | $parThis_2                                        	|   1 bit   | 0x0021       | 2     |
;| 11 | $parOut_0                                         	|   1 bit   | 0x0021       | 3     |
;| 12 | $parThis_3                                        	|   1 bit   | 0x0021       | 4     |
;| 13 | $once_4_FMTD_STR                                  	|   1 bit   | 0x0021       | 5     |
;| 14 | $fmtd_3_doSend                                    	|   1 bit   | 0x0021       | 6     |
;| 15 | $fmtd_2_isLeadingZero                             	|   1 bit   | 0x0021       | 7     |
;| 16 | $parOut_1                                         	|   1 bit   | 0x0022       | 0     |
;| 17 | $parThis_4                                        	|   1 bit   | 0x0022       | 1     |
;| 18 | $once_5_FMTD_STR                                  	|   1 bit   | 0x0022       | 2     |
;| 19 | $fmtd_7_doSend                                    	|   1 bit   | 0x0022       | 3     |
;| 20 | $fmtd_6_isLeadingZero                             	|   1 bit   | 0x0022       | 4     |
;| 21 | $once_6_FMTD_STR                                  	|   1 bit   | 0x0022       | 5     |
;| 22 | $fmtd_b_doSend                                    	|   1 bit   | 0x0022       | 6     |
;| 23 | $fmtd_a_isLeadingZero                             	|   1 bit   | 0x0022       | 7     |
;| 24 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0035       | 0     |
;| 25 | $overflow                                         	|   1 bit   | 0x0035       | 1     |

