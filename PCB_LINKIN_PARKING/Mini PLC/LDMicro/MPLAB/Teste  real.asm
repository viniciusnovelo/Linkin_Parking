;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F887 is the LDmicro target processor.
	LIST    p=PIC16F887
#include P16F887.inc
	__CONFIG 0x2007, 0x23E2
	__CONFIG 0x2008, 0x600
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_0000af	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000008: clrf	 0x27            	  ; (OP_CLRF, result3)
          clrf	 0x26            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00000f: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_000017	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x26            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x27            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_000017: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_00000f	 	  ; (OP_GOTO, top)
i_00001e: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x28            	  ; (OP_CLRF, result4)
          clrf	 0x27            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_000027: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_00002f	 	  ; (OP_GOTO, dontAdd)
          movf	 0x22            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x27            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x23            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x23            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_00002f: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x25            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x24            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x2E            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000027	 	  ; (OP_GOTO, top)
i_000037: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_000038: movf	 0x23            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000042	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000042: btfss	 0x23            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_000049	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000049: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00004e: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_000067	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_000065	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_000064: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000065: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_000066: goto	 l_00004e	 	  ; (OP_GOTO, loop)
l_000067: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_00006e: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x24            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x21            	  ; (OP_MOVWF, sign)
i_000072: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000073: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x27            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_00007b	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x27            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x26            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x27            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_00007b: btfss	 0x24            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_000085	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_000085: clrf	 0x29            	  ; (OP_CLRF, remainder1)
          clrf	 0x28            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x2E            	  ; (OP_MOVWF, counter)
l_00008a: rlf	 0x22            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x23            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x24            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x2E            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000a4	 	  ; (OP_GOTO, done)
          rlf	 0x28            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x29            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x28            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x29            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x29            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x29            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000a2	 	  ; (OP_GOTO, notNegative)
          movf	 0x26            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x27            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000a1: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a2: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000a3: goto	 l_00008a	 	  ; (OP_GOTO, loop)
l_0000a4: btfss	 0x21            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x22            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x23            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x22            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x23            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x24            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000ae: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer0
l_0000af: bcf	 0x0B            , 5	  ; (OP_BCF, REG_INTCON, T0IE)
          bsf	 0x03            , 5	  ;  BS(0x00,0x81) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          bcf	 0x01            , 5	  ; (OP_BCF, REG_OPTION, T0CS)
          clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0xF0             	  ; (OP_MOVLW, 0xF0)
          andwf	 0x01            , 0	  ; (OP_ANDWF, REG_OPTION, DEST_W)
          iorlw	 0x05             	  ; (OP_IORLW, plcTmr.PS)
          movwf	 0x01            	  ; (OP_MOVWF, REG_OPTION)
          bcf	 0x03            , 5	  ;  BS(0x80,0x01) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x83             	  ; (OP_MOVLW, 256 - plcTmr.tmr)
          movwf	 0x01            	  ; (OP_MOVWF, REG_TMR0)
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_0000be: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_0000be	 	  ; (OP_GOTO, zeroMem)
    ; Configure PLC Timer softDivisor
          movlw	 0x05             	  ; (plcTmr.softDivisorAddr, (BYTE)(plcTmr.softDivisor & 0xff)) ; 0x5
          movwf	 0x33            	  ; (plcTmr.softDivisorAddr, (BYTE)(plcTmr.softDivisor & 0xff)) ; 0x33
          bsf	 0x03            , 5	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          bsf	 0x03            , 6	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
          bcf	 0x03            , 5	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x8
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x09            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x9
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xDF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xDF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xFA             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFA
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x08            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x88
          movlw	 0xFB             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFB
          movwf	 0x09            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x89
l_0000df: bcf	 0x03            , 5	  ;  BS(0x1A0,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x1A0,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; Begin Of PLC Cycle
          btfsc	 0x0B            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0B            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_0000e5: movlw	 0x83             	  ; (OP_MOVLW, 256 - plcTmr.tmr + 0)
l_0000e6: btfss	 0x0B            , 2	  ; (OP_BTFSS, 0x0b, 2)
          goto	 l_0000e6	 	  ; (OP_GOTO, PicProgWriteP - 1)
          addwf	 0x01            , 1	  ; (OP_ADDWF, REG_TMR0, DEST_F)
          bcf	 0x0B            , 2	  ; (OP_BCF, REG_INTCON, T0IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
          btfss	 0x20            , 4	  ; (OP_BTFSS, addrINTCON_T0IF, bitINTCON_T0IF)
          goto	 l_0000f0	 	  ; (OP_GOTO, Decrement2)
          decf	 0x33            , 1	  ; (OP_DECF, plcTmr.softDivisorAddr, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000f2	 	  ; (OP_GOTO, setLiteral)
l_0000f0: decfsz 0x33            , 1	  ; (OP_DECFSZ, plcTmr.softDivisorAddr, DEST_F)
          goto	 l_0000e5	 	  ; (OP_GOTO, BeginOfPLCCycle0)
    ; CopyLitToReg
l_0000f2: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; plcTmr.softDivisor
          movwf	 0x33            	  ; (OP_MOVWF, addr + i, 0, comment) ; plcTmr.softDivisor
    ; INIT TABLES
    ; 
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb3
          btfsc	 0x06            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb3
          goto	 l_0000f8	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_SET_PWM
    ; INT_IF_BIT_SET $rung_top
l_0000f8: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00011c	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_PWM duty_cycle 1000 PWMoutpin 0-100% (6.7 bits)
    ; CopyRegToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; duty_cycle
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Scratch0:1
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; duty_cycle
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Scratch0:1
    ; CopyLitToReg
          movlw	 0xFA             	  ; (OP_MOVLW, lNow, 0, comment) ; pr2plus1
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; pr2plus1
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; pr2plus1
          call	 l_000008	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2:3
          movwf	 0x22            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Scratch0:1
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2:3
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Scratch0:1
    ; CopyLitToReg
          movlw	 0x64             	  ; (OP_MOVLW, lNow, 0, comment) ; 100
          movwf	 0x26            	  ; (OP_MOVWF, addr + i, 0, comment) ; 100
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 100
i_000109: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00010a: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000038	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
          movf	 0x22            , 0 	  ; (OP_MOVF, Scratch0, DEST_W)
          movwf	 0x15            	  ; (OP_MOVWF, REG_CCPRxL)
          movlw	 0x0C             	  ; (REG_CCPxCON, 0x0c) ; 0xC
          movwf	 0x17            	  ; (REG_CCPxCON, 0x0c) ; 0x17
i_000110: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000111: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; PWM init
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr, bit)
          goto	 l_00011b	 	  ; (OP_GOTO, skip)
          bsf	 0x20            , 1	  ; (OP_BSF, addr, bit)
          bsf	 0x03            , 5	  ;  BS(0x00,0x92) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xF9             	  ; (REG_PR2, pr2plus1 - 1) ; 0xF9
          movwf	 0x12            	  ; (REG_PR2, pr2plus1 - 1) ; 0x92
          bcf	 0x03            , 5	  ;  BS(0x80,0x12) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x06             	  ; (REG_T2CON, t2con) ; 0x6
          movwf	 0x12            	  ; (REG_T2CON, t2con) ; 0x12
    ; INT_SET_BIT $PWMoutpin
l_00011b: bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $PWMoutpin
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
l_00011c: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Xb0
          btfss	 0x06            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Xb0
          goto	 l_000120	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_000120: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye2:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yc0:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x07            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x07            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ya5:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000141: goto	 l_0000df	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_000142: goto	 l_000142	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 20
;| 15 | duty_cycle                                        	|   2 byte  | 0x0034       |
;| 19 | $softDivisor                                      	|   1 byte  | 0x0033       |

;|Internal Relays: 5
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | $pwm_init_PWMoutpin                               	|   1 bit   | 0x0020       | 1     |
;|  2 | $PWMoutpin                                        	|   1 bit   | 0x0020       | 2     |
;|  3 | $parThis_0                                        	|   1 bit   | 0x0020       | 3     |
;|  4 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0020       | 4     |

