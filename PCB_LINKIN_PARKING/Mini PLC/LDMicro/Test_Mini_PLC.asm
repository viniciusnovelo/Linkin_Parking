;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F887 is the LDmicro target processor.
	LIST    p=PIC16F887
#include P16F887.inc
	__CONFIG 0x2007, 0x23E2
	__CONFIG 0x2008, 0x600
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000091	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x24            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x23            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	; '\xBF'  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	; '\x86'  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	; '\xDB'  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	; '\xCF'  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	; '\xE6'  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	; '\xED'  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	; '\xFD'  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	; '\x87'  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	; '\xFF'  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	; '\xEF'  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	; '\xF7'  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	; '\xFC'  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	; '\xB9'  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	; '\xDE'  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	; '\xF9'  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	; '\xF1'  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	; '\xB0'  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	; '"'  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	; 'N'  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	; '\xD2'  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	; '\xDA'  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	; 'r'  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	; 'p'  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	; '\x0C'  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	; '@'  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	; '\x80'  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	; 'R'  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	; '\x09'  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	; '\x0D'  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	; 'a'  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	; 'A'  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	; 'C'  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	; '\xD3'  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	; '\x9F'  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	; '='  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	; '\x1E'  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	; '8'  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	; '3'  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	; 'd'  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	; '#'  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	; '\x08'  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	; '_'  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	; 'X'  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	; '{'  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	; '\x10'  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	; '\x0E'  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	; '\x18'  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	; 'P'  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	; '\x01'  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	; 'c'  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; Program Start
    ; Configure Timer1
l_000091: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0xE8             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0xE8
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x03             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x3
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_0000a2: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_0000a2	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          bsf	 0x03            , 6	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
          bcf	 0x03            , 5	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x8
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x09            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x9
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xDF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xDF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xF8             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xF8
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
          movlw	 0x00             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x88
          movlw	 0xFC             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFC
          movwf	 0x09            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x89
l_0000c1: bcf	 0x03            , 5	  ;  BS(0x80,0x0C) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; Begin Of PLC Cycle
          btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_0000c6: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_0000c6	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; 
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T1s 1000000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000100	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T1s 500
    ; CopyRegToReg
          movf	 0x34            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xF4             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0000e7	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0000e7	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0000e7: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0000ec	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0000eb: goto	 l_0000ee	 	  ; (OP_GOTO, isEnd)
l_0000ec: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0000ee: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0000f1	 	  ; (OP_GOTO, ifThen)
i_0000f0: goto	 l_0000f5	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T1s overlap to  overflow to 
l_0000f1: incf	 0x34            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T1s
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x35            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; T1s
i_0000f4: goto	 l_0000fc	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_0000f5: clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x34):=0(0x0)
          clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x34):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_0_TCY_T1s
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_TCY_T1s
          goto	 l_0000fb	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_TCY_T1s
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_TCY_T1s
i_0000fa: goto	 l_0000fc	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_0_TCY_T1s
l_0000fb: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_0_TCY_T1s
    ; INT_IF_BIT_CLEAR $once_0_TCY_T1s
l_0000fc: btfsc	 0x20            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_TCY_T1s
          goto	 l_0000ff	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_0000ff: goto	 l_000102	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_000100: clrf	 0x34            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x34):=0(0x0)
          clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x34):=0(0x0)
    ; ELEM_OPEN
    ; INT_CLEAR_BIT $rung_top
l_000102: bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yc0:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x07            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x07            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yc2:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x07            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x07            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ya5:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ya5:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yc1:=$parThis_0
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x07            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x07            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T1sa 1000000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000170	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T1sa 500
    ; CopyRegToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1sa
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1sa
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xF4             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 500
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 500
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000157	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000157	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000157: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00015c	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00015b: goto	 l_00015e	 	  ; (OP_GOTO, isEnd)
l_00015c: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_00015e: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000161	 	  ; (OP_GOTO, ifThen)
i_000160: goto	 l_000165	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T1sa overlap to  overflow to 
l_000161: incf	 0x36            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T1sa
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x37            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; T1sa
i_000164: goto	 l_00016c	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1sa:=0x0(0)
    ; CopyLitToReg
l_000165: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T1sa(0x36):=0(0x0)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T1sa(0x36):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T1sa
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T1sa
          goto	 l_00016b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T1sa
          bsf	 0x20            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T1sa
i_00016a: goto	 l_00016c	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T1sa
l_00016b: bcf	 0x20            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T1sa
    ; INT_IF_BIT_CLEAR $once_1_TCY_T1sa
l_00016c: btfsc	 0x20            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T1sa
          goto	 l_00016f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_00016f: goto	 l_000172	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1sa:=0x0(0)
    ; CopyLitToReg
l_000170: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T1sa(0x36):=0(0x0)
          clrf	 0x37            	  ; (OP_CLRF, addr + i, 0, comment) ; T1sa(0x36):=0(0x0)
    ; ELEM_OPEN
    ; INT_CLEAR_BIT $rung_top
l_000172: bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd0:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd1:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd2:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd3:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd4:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd5:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd6:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Yd7:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x08            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x08            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_OPEN
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye0:=$parThis_2
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_OPEN
    ; INT_CLEAR_BIT $parThis_2
          bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_2
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye1:=$parThis_2
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001ea	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL uni:=0x4(4)
    ; CopyLitToReg
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; uni(0x38):=4(0x4)
          movwf	 0x38            	  ; (OP_MOVWF, addr + i, 0, comment) ; uni(0x38):=4(0x4)
          clrf	 0x39            	  ; (OP_CLRF, addr + i, 0, comment) ; uni(0x38):=4(0x4)
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
l_0001ea: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001f0	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL dez:=0x5(5)
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; dez(0x3A):=5(0x5)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; dez(0x3A):=5(0x5)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; dez(0x3A):=5(0x5)
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_0001f0: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001f5	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x88) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISD:=0x0(0)
    ; CopyLitToReg
          clrf	 0x08            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISD(0x88):=0(0x0)
l_0001f5: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET R20m
          btfss	 0x20            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; R20m
          goto	 l_0001fa	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_0001fa: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000263	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3C):=176(0xB0)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3C):=176(0xB0)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3C):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x38            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00020b	 	  ; (OP_GOTO, ifEnd)
          movf	 0x39            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00020b	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL uni:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; uni(0x38):=128(0x80)
          movwf	 0x38            	  ; (OP_MOVWF, addr + i, 0, comment) ; uni(0x38):=128(0x80)
          clrf	 0x39            	  ; (OP_CLRF, addr + i, 0, comment) ; uni(0x38):=128(0x80)
i_00020a: goto	 l_000258	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES uni 0
    ; CopyRegToReg
l_00020b: movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000223	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000223	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000223: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000228	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000227: goto	 l_00022a	 	  ; (OP_GOTO, isEnd)
l_000228: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_00022a: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00022d	 	  ; (OP_GOTO, ifThen)
i_00022c: goto	 l_000231	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL uni:=0x20(32)
    ; CopyLitToReg
l_00022d: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; uni(0x38):=32(0x20)
          movwf	 0x38            	  ; (OP_MOVWF, addr + i, 0, comment) ; uni(0x38):=32(0x20)
          clrf	 0x39            	  ; (OP_CLRF, addr + i, 0, comment) ; uni(0x38):=32(0x20)
i_000230: goto	 l_000258	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES uni 129
    ; CopyRegToReg
l_000231: movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00024a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00024a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00024a: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00024f	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_00024e: goto	 l_000251	 	  ; (OP_GOTO, isEnd)
l_00024f: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000251: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000254	 	  ; (OP_GOTO, ifThen)
i_000253: goto	 l_000255	 	  ; (OP_GOTO, ifEnd)
l_000254: goto	 l_000258	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL uni:=0x20(32)
    ; CopyLitToReg
l_000255: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; uni(0x38):=32(0x20)
          movwf	 0x38            	  ; (OP_MOVWF, addr + i, 0, comment) ; uni(0x38):=32(0x20)
          clrf	 0x39            	  ; (OP_CLRF, addr + i, 0, comment) ; uni(0x38):=32(0x20)
    ; Scratch0:1 := Index 'uni'
    ; CopyRegToReg
l_000258: movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; uni
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x3C            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x3D            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x3C            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x3D            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_000263: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye0:=$parThis_3
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_000272: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000273: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x20            , 7	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_000278	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye0
          bcf	 0x09            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye0
i_000277: goto	 l_000279	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye0
l_000278: bsf	 0x09            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye0
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_000279: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R20m
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R20m
          goto	 l_00027d	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_00027d: btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0002e6	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x3C):=176(0xB0)
          movwf	 0x3C            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x3C):=176(0xB0)
          clrf	 0x3D            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x3C):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x3A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00028e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x3B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x3D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00028e	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL dez:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; dez(0x3A):=128(0x80)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; dez(0x3A):=128(0x80)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; dez(0x3A):=128(0x80)
i_00028d: goto	 l_0002db	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES dez 0
    ; CopyRegToReg
l_00028e: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x27            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002a6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002a6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002a6: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002ab	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0002aa: goto	 l_0002ad	 	  ; (OP_GOTO, isEnd)
l_0002ab: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0002ad: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002b0	 	  ; (OP_GOTO, ifThen)
i_0002af: goto	 l_0002b4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL dez:=0x20(32)
    ; CopyLitToReg
l_0002b0: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; dez(0x3A):=32(0x20)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; dez(0x3A):=32(0x20)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; dez(0x3A):=32(0x20)
i_0002b3: goto	 l_0002db	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES dez 129
    ; CopyRegToReg
l_0002b4: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x28            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002cd	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002cd	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002cd: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002d2	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_0002d1: goto	 l_0002d4	 	  ; (OP_GOTO, isEnd)
l_0002d2: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_0002d4: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002d7	 	  ; (OP_GOTO, ifThen)
i_0002d6: goto	 l_0002d8	 	  ; (OP_GOTO, ifEnd)
l_0002d7: goto	 l_0002db	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL dez:=0x20(32)
    ; CopyLitToReg
l_0002d8: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; dez(0x3A):=32(0x20)
          movwf	 0x3A            	  ; (OP_MOVWF, addr + i, 0, comment) ; dez(0x3A):=32(0x20)
          clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; dez(0x3A):=32(0x20)
    ; Scratch0:1 := Index 'dez'
    ; CopyRegToReg
l_0002db: movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; dez
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x3C            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x3D            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x3C            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x3D            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_0002e6: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye1:=$parThis_4
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_0002f5: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002f6: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_0002fb	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye1
          bcf	 0x09            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye1
i_0002fa: goto	 l_0002fc	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye1
l_0002fb: bsf	 0x09            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye1
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
l_0002fc: bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T2m 10000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000327	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T2m 5
    ; CopyRegToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T2m
          movwf	 0x23            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; 5
          movwf	 0x27            	  ; (OP_MOVWF, addr + i, 0, comment) ; 5
          bcf	 0x21            , 5	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x27            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x23            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x22            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000311	 	  ; (OP_GOTO, notOverflow)
          movf	 0x23            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x27            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x22            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x22            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000311	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x21            , 5	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000311: btfss	 0x21            , 5	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000316	 	  ; (OP_GOTO, is0)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x21            , 5	  ; (OP_BCF, addrDest, bitDest)
i_000315: goto	 l_000318	 	  ; (OP_GOTO, isEnd)
l_000316: btfsc	 0x23            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x21            , 5	  ; (OP_BSF, addrDest, bitDest)
l_000318: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00031b	 	  ; (OP_GOTO, ifThen)
i_00031a: goto	 l_00031d	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T2m overlap to  overflow to 
l_00031b: incf	 0x3E            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T2m
i_00031c: goto	 l_000323	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T2m:=0x0(0)
    ; CopyLitToReg
l_00031d: clrf	 0x3E            	  ; (OP_CLRF, addr + i, 0, comment) ; T2m(0x3E):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_2_TCY_T2m
          btfsc	 0x21            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T2m
          goto	 l_000322	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_2_TCY_T2m
          bsf	 0x21            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_TCY_T2m
i_000321: goto	 l_000323	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_TCY_T2m
l_000322: bcf	 0x21            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_TCY_T2m
    ; INT_IF_BIT_CLEAR $once_2_TCY_T2m
l_000323: btfsc	 0x21            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T2m
          goto	 l_000326	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000326: goto	 l_000328	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T2m:=0x0(0)
    ; CopyLitToReg
l_000327: clrf	 0x3E            	  ; (OP_CLRF, addr + i, 0, comment) ; T2m(0x3E):=0(0x0)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT R20m:=$rung_top
l_000328: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 10 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
          bcf	 0x21            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb1
          btfsc	 0x06            , 1	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb1
          goto	 l_000335	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_000335: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000338	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
l_000338: btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 0	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Ya5
          btfsc	 0x05            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Ya5
          goto	 l_00033f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $parThis_5
          bcf	 0x21            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_BIT_SET $parThis_5
l_00033f: btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000342	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_000342: btfsc	 0x21            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x21            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Xb0
          btfss	 0x06            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Xb0
          goto	 l_000349	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ya5:=$rung_top
l_000349: bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x05            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x05            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000350: goto	 l_0000c1	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_000351: goto	 l_000351	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 33
;|  0 | #PORTD                                            	|   1 byte  | 0x0008       |
;|  1 | #TRISD                                            	|   1 byte  | 0x0088       |
;|  3 | T1s                                               	|   2 byte  | 0x0034       |
;|  4 | T1sa                                              	|   2 byte  | 0x0036       |
;|  6 | T2m                                               	|   1 byte  | 0x003E       |
;|  9 | char7seg                                          	| 129 byte  | 0x0008       |
;| 12 | dez                                               	|   2 byte  | 0x003A       |
;| 14 | uni                                               	|   2 byte  | 0x0038       |
;| 32 | $scratch                                          	|   2 byte  | 0x003C       |

;|Internal Relays: 14
;|  0 | $rung_top                                         	|   1 bit   | 0x0020       | 0     |
;|  1 | $once_0_TCY_T1s                                   	|   1 bit   | 0x0020       | 1     |
;|  2 | $parThis_0                                        	|   1 bit   | 0x0020       | 2     |
;|  3 | $once_1_TCY_T1sa                                  	|   1 bit   | 0x0020       | 3     |
;|  4 | $parThis_1                                        	|   1 bit   | 0x0020       | 4     |
;|  5 | $parThis_2                                        	|   1 bit   | 0x0020       | 5     |
;|  6 | R20m                                              	|   1 bit   | 0x0020       | 6     |
;|  7 | $parThis_3                                        	|   1 bit   | 0x0020       | 7     |
;|  8 | $parThis_4                                        	|   1 bit   | 0x0021       | 0     |
;|  9 | $once_2_TCY_T2m                                   	|   1 bit   | 0x0021       | 1     |
;| 10 | $parOut_0                                         	|   1 bit   | 0x0021       | 2     |
;| 11 | $parThis_5                                        	|   1 bit   | 0x0021       | 3     |
;| 12 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0021       | 4     |
;| 13 | $overflow                                         	|   1 bit   | 0x0021       | 5     |

