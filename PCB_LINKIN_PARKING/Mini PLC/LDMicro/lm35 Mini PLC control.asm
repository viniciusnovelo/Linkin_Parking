;/* This is auto-generated ASM code from LDmicro. Do not edit this file!
;   Go back to the LDmicro ladder diagram source for changes in the ladder logic. */
; PIC16F887 is the LDmicro target processor.
	LIST    p=PIC16F887
#include P16F887.inc
	__CONFIG 0x2007, 0x3F72
	__CONFIG 0x2008, 0x0
	radix dec
	org 0
;TABSIZE = 8
;	CODE
    ; Reset vector
i_000000: clrf	 0x03            	  ; (OP_CLRF, REG_STATUS)
i_000001: clrf	 0x0A            	  ; (OP_CLRF, REG_PCLATH)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; GOTO progStart
i_000003: goto	 l_000138	 	  ; (OP_GOTO, progStart)
    ; Interrupt Vector
i_000004: retfie	 	 	  ; (OP_RETFIE, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
          nop	 		 	  ; (OP_NOP_, 0, 0)
    ; TABLE char7seg[129]
l_000008: movlw	 0x00             	  ; (OP_MOVLW, ((addrOfTableRoutine + TABLE_CALC) >> 8) & 0xFF)
          addwf	 0x25            , 0	  ; (OP_ADDWF, Scratch1, DEST_W)
i_00000a: movwf	 0x0A            	  ; (OP_MOVWF, REG_PCLATH)
          movlw	 0x10             	  ; (OP_MOVLW, (addrOfTableRoutine + TABLE_CALC) & 0xFF)
          addwf	 0x24            , 0	  ; (OP_ADDWF, Scratch0, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
i_00000e: incf	 0x0A            , 1	  ; (OP_INCF, REG_PCLATH, DEST_F)
          movwf	 0x02            	  ; (OP_MOVWF, REG_PCL)
    ; DATA's size is 1
i_000010: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000011: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000012: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000013: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000014: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000015: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000016: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000017: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000018: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000019: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00001a: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_00001b: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_00001c: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00001d: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_00001e: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_00001f: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000020: retlw	 0xBF             	; '\xBF'  ; (OP_RETLW, a->data[i])
i_000021: retlw	 0x86             	; '\x86'  ; (OP_RETLW, a->data[i])
i_000022: retlw	 0xDB             	; '\xDB'  ; (OP_RETLW, a->data[i])
i_000023: retlw	 0xCF             	; '\xCF'  ; (OP_RETLW, a->data[i])
i_000024: retlw	 0xE6             	; '\xE6'  ; (OP_RETLW, a->data[i])
i_000025: retlw	 0xED             	; '\xED'  ; (OP_RETLW, a->data[i])
i_000026: retlw	 0xFD             	; '\xFD'  ; (OP_RETLW, a->data[i])
i_000027: retlw	 0x87             	; '\x87'  ; (OP_RETLW, a->data[i])
i_000028: retlw	 0xFF             	; '\xFF'  ; (OP_RETLW, a->data[i])
i_000029: retlw	 0xEF             	; '\xEF'  ; (OP_RETLW, a->data[i])
i_00002a: retlw	 0xF7             	; '\xF7'  ; (OP_RETLW, a->data[i])
i_00002b: retlw	 0xFC             	; '\xFC'  ; (OP_RETLW, a->data[i])
i_00002c: retlw	 0xB9             	; '\xB9'  ; (OP_RETLW, a->data[i])
i_00002d: retlw	 0xDE             	; '\xDE'  ; (OP_RETLW, a->data[i])
i_00002e: retlw	 0xF9             	; '\xF9'  ; (OP_RETLW, a->data[i])
i_00002f: retlw	 0xF1             	; '\xF1'  ; (OP_RETLW, a->data[i])
i_000030: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000031: retlw	 0xB0             	; '\xB0'  ; (OP_RETLW, a->data[i])
i_000032: retlw	 0x22             	; '"'  ; (OP_RETLW, a->data[i])
i_000033: retlw	 0x4E             	; 'N'  ; (OP_RETLW, a->data[i])
i_000034: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000035: retlw	 0xD2             	; '\xD2'  ; (OP_RETLW, a->data[i])
i_000036: retlw	 0xDA             	; '\xDA'  ; (OP_RETLW, a->data[i])
i_000037: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000038: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000039: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00003a: retlw	 0x72             	; 'r'  ; (OP_RETLW, a->data[i])
i_00003b: retlw	 0x70             	; 'p'  ; (OP_RETLW, a->data[i])
i_00003c: retlw	 0x0C             	; '\x0C'  ; (OP_RETLW, a->data[i])
i_00003d: retlw	 0x40             	; '@'  ; (OP_RETLW, a->data[i])
i_00003e: retlw	 0x80             	; '\x80'  ; (OP_RETLW, a->data[i])
i_00003f: retlw	 0x52             	; 'R'  ; (OP_RETLW, a->data[i])
i_000040: retlw	 0x3F             	; '?'  ; (OP_RETLW, a->data[i])
i_000041: retlw	 0x06             	; '\x06'  ; (OP_RETLW, a->data[i])
i_000042: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_000043: retlw	 0x4F             	; 'O'  ; (OP_RETLW, a->data[i])
i_000044: retlw	 0x66             	; 'f'  ; (OP_RETLW, a->data[i])
i_000045: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000046: retlw	 0x7D             	; '}'  ; (OP_RETLW, a->data[i])
i_000047: retlw	 0x07             	; '\x07'  ; (OP_RETLW, a->data[i])
i_000048: retlw	 0x7F             	; '\x7F'  ; (OP_RETLW, a->data[i])
i_000049: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_00004a: retlw	 0x09             	; '\x09'  ; (OP_RETLW, a->data[i])
i_00004b: retlw	 0x0D             	; '\x0D'  ; (OP_RETLW, a->data[i])
i_00004c: retlw	 0x61             	; 'a'  ; (OP_RETLW, a->data[i])
i_00004d: retlw	 0x41             	; 'A'  ; (OP_RETLW, a->data[i])
i_00004e: retlw	 0x43             	; 'C'  ; (OP_RETLW, a->data[i])
i_00004f: retlw	 0xD3             	; '\xD3'  ; (OP_RETLW, a->data[i])
i_000050: retlw	 0x9F             	; '\x9F'  ; (OP_RETLW, a->data[i])
i_000051: retlw	 0x77             	; 'w'  ; (OP_RETLW, a->data[i])
i_000052: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000053: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_000054: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000055: retlw	 0x79             	; 'y'  ; (OP_RETLW, a->data[i])
i_000056: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000057: retlw	 0x3D             	; '='  ; (OP_RETLW, a->data[i])
i_000058: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000059: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00005a: retlw	 0x1E             	; '\x1E'  ; (OP_RETLW, a->data[i])
i_00005b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00005c: retlw	 0x38             	; '8'  ; (OP_RETLW, a->data[i])
i_00005d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00005e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00005f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000060: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000061: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000062: retlw	 0x33             	; '3'  ; (OP_RETLW, a->data[i])
i_000063: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000064: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000065: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000066: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000067: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000068: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000069: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00006a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00006b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00006c: retlw	 0x64             	; 'd'  ; (OP_RETLW, a->data[i])
i_00006d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00006e: retlw	 0x23             	; '#'  ; (OP_RETLW, a->data[i])
i_00006f: retlw	 0x08             	; '\x08'  ; (OP_RETLW, a->data[i])
i_000070: retlw	 0x20             	; ' '  ; (OP_RETLW, a->data[i])
i_000071: retlw	 0x5F             	; '_'  ; (OP_RETLW, a->data[i])
i_000072: retlw	 0x7C             	; '|'  ; (OP_RETLW, a->data[i])
i_000073: retlw	 0x58             	; 'X'  ; (OP_RETLW, a->data[i])
i_000074: retlw	 0x5E             	; '^'  ; (OP_RETLW, a->data[i])
i_000075: retlw	 0x7B             	; '{'  ; (OP_RETLW, a->data[i])
i_000076: retlw	 0x71             	; 'q'  ; (OP_RETLW, a->data[i])
i_000077: retlw	 0x6F             	; 'o'  ; (OP_RETLW, a->data[i])
i_000078: retlw	 0x74             	; 't'  ; (OP_RETLW, a->data[i])
i_000079: retlw	 0x10             	; '\x10'  ; (OP_RETLW, a->data[i])
i_00007a: retlw	 0x0E             	; '\x0E'  ; (OP_RETLW, a->data[i])
i_00007b: retlw	 0x75             	; 'u'  ; (OP_RETLW, a->data[i])
i_00007c: retlw	 0x18             	; '\x18'  ; (OP_RETLW, a->data[i])
i_00007d: retlw	 0x55             	; 'U'  ; (OP_RETLW, a->data[i])
i_00007e: retlw	 0x54             	; 'T'  ; (OP_RETLW, a->data[i])
i_00007f: retlw	 0x5C             	; '\'  ; (OP_RETLW, a->data[i])
i_000080: retlw	 0x73             	; 's'  ; (OP_RETLW, a->data[i])
i_000081: retlw	 0x67             	; 'g'  ; (OP_RETLW, a->data[i])
i_000082: retlw	 0x50             	; 'P'  ; (OP_RETLW, a->data[i])
i_000083: retlw	 0x6D             	; 'm'  ; (OP_RETLW, a->data[i])
i_000084: retlw	 0x78             	; 'x'  ; (OP_RETLW, a->data[i])
i_000085: retlw	 0x3E             	; '>'  ; (OP_RETLW, a->data[i])
i_000086: retlw	 0x1C             	; '\x1C'  ; (OP_RETLW, a->data[i])
i_000087: retlw	 0x6A             	; 'j'  ; (OP_RETLW, a->data[i])
i_000088: retlw	 0x76             	; 'v'  ; (OP_RETLW, a->data[i])
i_000089: retlw	 0x6E             	; 'n'  ; (OP_RETLW, a->data[i])
i_00008a: retlw	 0x5B             	; '['  ; (OP_RETLW, a->data[i])
i_00008b: retlw	 0x39             	; '9'  ; (OP_RETLW, a->data[i])
i_00008c: retlw	 0x30             	; '0'  ; (OP_RETLW, a->data[i])
i_00008d: retlw	 0x0F             	; '\x0F'  ; (OP_RETLW, a->data[i])
i_00008e: retlw	 0x01             	; '\x01'  ; (OP_RETLW, a->data[i])
i_00008f: retlw	 0x00             	; '\x00'  ; (OP_RETLW, a->data[i])
i_000090: retlw	 0x63             	; 'c'  ; (OP_RETLW, a->data[i])
    ; TABLE char7seg END
    ; MultiplyRoutine16x16=32 (2x2=4)
l_000091: clrf	 0x29            	  ; (OP_CLRF, result3)
          clrf	 0x28            	  ; (OP_CLRF, result2)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x10             	  ; (OP_MOVLW, 16)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_000098: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000a0	 	  ; (OP_GOTO, dontAdd)
          movf	 0x24            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x28            , 1	  ; (OP_ADDWF, result2, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x29            , 1	  ; (OP_INCF, result3, DEST_F)
          movf	 0x25            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, result3, DEST_F)
l_0000a0: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x29            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x30            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_000098	 	  ; (OP_GOTO, top)
i_0000a7: return	 	 	  ; (OP_RETURN)
    ; MultiplyRoutine24x16=40 (3x2=5)
          clrf	 0x2A            	  ; (OP_CLRF, result4)
          clrf	 0x29            	  ; (OP_CLRF, result3)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          movlw	 0x18             	  ; (OP_MOVLW, 24)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_0000b0: btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          goto	 l_0000b8	 	  ; (OP_GOTO, dontAdd)
          movf	 0x24            , 0 	  ; (OP_MOVF, multiplicand0, DEST_W)
          addwf	 0x29            , 1	  ; (OP_ADDWF, result3, DEST_F)
          movf	 0x25            , 0 	  ; (OP_MOVF, multiplicand1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x25            , 0	  ; (OP_INCFSZ, multiplicand1, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, result4, DEST_F)
l_0000b8: bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          rrf	 0x2A            , 1	  ; (OP_RRF, result4, DEST_F)
          rrf	 0x29            , 1	  ; (OP_RRF, result3, DEST_F)
          rrf	 0x28            , 1	  ; (OP_RRF, result2, DEST_F)
          rrf	 0x27            , 1	  ; (OP_RRF, result1, DEST_F)
          rrf	 0x26            , 1	  ; (OP_RRF, result0, DEST_F)
          decfsz 0x30            , 1	  ; (OP_DECFSZ, counter, DEST_F)
          goto	 l_0000b0	 	  ; (OP_GOTO, top)
i_0000c0: return	 	 	  ; (OP_RETURN)
    ; DivideRoutine16
l_0000c1: movf	 0x25            , 0 	  ; (OP_MOVF, dividend1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, sign)
          btfss	 0x29            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_0000cb	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x28            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x29            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x28            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x29            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_0000cb: btfss	 0x25            , 7	  ; (OP_BTFSS, dividend1, 7)
          goto	 l_0000d2	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_0000d2: clrf	 0x2B            	  ; (OP_CLRF, remainder1)
          clrf	 0x2A            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x11             	  ; (OP_MOVLW, 16 + 1)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_0000d7: rlf	 0x24            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x25            , 1	  ; (OP_RLF, dividend1, DEST_F)
          decf	 0x30            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_0000f0	 	  ; (OP_GOTO, done)
          rlf	 0x2A            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x2B            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x2B            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_0000ee	 	  ; (OP_GOTO, notNegative)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x2B            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x2B            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_0000ed: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000ee: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_0000ef: goto	 l_0000d7	 	  ; (OP_GOTO, loop)
l_0000f0: btfss	 0x23            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_0000f7: return	 	 	  ; (OP_RETURN, 0, 0)
    ; DivideRoutine24/16=24
          movf	 0x26            , 0 	  ; (OP_MOVF, dividend2, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, divisor1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, sign)
i_0000fb: bcf	 0x0A            , 3	  ;  PS(0x18,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0000fc: bcf	 0x0A            , 4	  ;  PS(0x18,0x01) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x29            , 7	  ; (OP_BTFSS, divisor1, 7)
          goto	 l_000104	 	  ; (OP_GOTO, dontNegateDivisor)
          comf	 0x28            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          comf	 0x29            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; divisor
          incf	 0x28            , 1	  ; (OP_INCF, addr, DEST_F, name) ; divisor
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x29            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; divisor
l_000104: btfss	 0x26            , 7	  ; (OP_BTFSS, dividend2, 7)
          goto	 l_00010e	 	  ; (OP_GOTO, dontNegateDividend)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; dividend
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x26            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; dividend
l_00010e: clrf	 0x2B            	  ; (OP_CLRF, remainder1)
          clrf	 0x2A            	  ; (OP_CLRF, remainder0)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
          movlw	 0x19             	  ; (OP_MOVLW, 24 + 1)
          movwf	 0x30            	  ; (OP_MOVWF, counter)
l_000113: rlf	 0x24            , 1	  ; (OP_RLF, dividend0, DEST_F)
          rlf	 0x25            , 1	  ; (OP_RLF, dividend1, DEST_F)
          rlf	 0x26            , 1	  ; (OP_RLF, dividend2, DEST_F)
          decf	 0x30            , 1	  ; (OP_DECF, counter, DEST_F)
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          goto	 l_00012d	 	  ; (OP_GOTO, done)
          rlf	 0x2A            , 1	  ; (OP_RLF, remainder0, DEST_F)
          rlf	 0x2B            , 1	  ; (OP_RLF, remainder1, DEST_F)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          subwf	 0x2A            , 1	  ; (OP_SUBWF, remainder0, DEST_F)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          decf	 0x2B            , 1	  ; (OP_DECF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          subwf	 0x2B            , 1	  ; (OP_SUBWF, remainder1, DEST_F)
          btfss	 0x2B            , 7	  ; (OP_BTFSS, remainder1, 7)
          goto	 l_00012b	 	  ; (OP_GOTO, notNegative)
          movf	 0x28            , 0 	  ; (OP_MOVF, divisor0, DEST_W)
          addwf	 0x2A            , 1	  ; (OP_ADDWF, remainder0, DEST_F)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incf	 0x2B            , 1	  ; (OP_INCF, remainder1, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, divisor1, DEST_W)
          addwf	 0x2B            , 1	  ; (OP_ADDWF, remainder1, DEST_F)
          bcf	 0x03            , 0	  ; (OP_BCF, REG_STATUS, STATUS_C)
i_00012a: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012b: bsf	 0x03            , 0	  ; (OP_BSF, REG_STATUS, STATUS_C)
i_00012c: goto	 l_000113	 	  ; (OP_GOTO, loop)
l_00012d: btfss	 0x23            , 7	  ; (OP_BTFSS, sign, 7)
          return	 	 	  ; (OP_RETURN, 0, 0)
          comf	 0x24            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x25            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          comf	 0x26            , 1	  ; (OP_COMF, addr + i, DEST_F, name) ; result
          incf	 0x24            , 1	  ; (OP_INCF, addr, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x25            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
          btfsc	 0x03            , 2	  ; (OP_BTFSC, REG_STATUS, STATUS_Z)
          incf	 0x26            , 1	  ; (OP_INCF, addr + i, DEST_F, name) ; result
i_000137: return	 	 	  ; (OP_RETURN, 0, 0)
    ; Program Start
    ; Configure Timer1
l_000138: clrwdt	 	 	  ; (OP_CLRWDT)
          movlw	 0xC4             	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0xC4
          movwf	 0x15            	  ; (REG_CCPR1L, (BYTE)(plcTmr.tmr & 0xff)) ; 0x15
          movlw	 0x09             	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x9
          movwf	 0x16            	  ; (REG_CCPR1H, (BYTE)(plcTmr.tmr >> 8)) ; 0x16
          movlw	 0x00             	  ; (REG_TMR1L, 0) ; 0x0
          movwf	 0x0E            	  ; (REG_TMR1L, 0) ; 0xE
          movlw	 0x00             	  ; (REG_TMR1H, 0) ; 0x0
          movwf	 0x0F            	  ; (REG_TMR1H, 0) ; 0xF
          movlw	 0x31             	  ; (REG_T1CON, plcTmr.PS) ; 0x31
          movwf	 0x10            	  ; (REG_T1CON, plcTmr.PS) ; 0x10
          movlw	 0x0B             	  ; (REG_CCP1CON, ccp1con) ; 0xB
          movwf	 0x17            	  ; (REG_CCP1CON, ccp1con) ; 0x17
    ; Now zero out the RAM
          movlw	 0x5F             	  ; (OP_MOVLW, Prog.mcu()->ram[i].len - 1)
          movwf	 0x20            	  ; (OP_MOVWF, Prog.mcu()->ram[i].start & ~BankMask())
          movlw	 0x21             	  ; (OP_MOVLW, (Prog.mcu()->ram[i].start + 1) & ~BankMask())
          movwf	 0x04            	  ; (OP_MOVWF, REG_FSR)
l_000149: clrf	 0x00            	  ; (OP_CLRF, REG_INDF)
          incf	 0x04            , 1	  ; (OP_INCF, REG_FSR, DEST_F)
          decfsz 0x20            , 1	  ; (OP_DECFSZ, Prog.mcu()->ram[i].start & ~BankMask(), DEST_F)
          goto	 l_000149	 	  ; (OP_GOTO, zeroMem)
          bsf	 0x03            , 5	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          bsf	 0x03            , 6	  ;  BS(0x00,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
    ; Set up the ANSELx registers. 1-analog input, 0-digital I/O.
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
          bcf	 0x03            , 5	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x05) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; Set up the TRISx registers (direction). 1-tri-stated (input), 0-output and drive the outputs low to start
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x05            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x5
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x06            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x6
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x07            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x7
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x08            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x8
          movlw	 0x00             	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x0
          movwf	 0x09            	  ; (Prog.mcu()->outputRegs[i], 0x00) ; 0x9
          bsf	 0x03            , 5	  ;  BS(0x00,0x85) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0xDF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xDF
          movwf	 0x05            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x85
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x06            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x86
          movlw	 0xBA             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xBA
          movwf	 0x07            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x87
          movlw	 0xFF             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xFF
          movwf	 0x08            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x88
          movlw	 0xF8             	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0xF8
          movwf	 0x09            	  ; (Prog.mcu()->dirRegs[i], ~isOutput[i]) ; 0x89
    ; UART setup
          movlw	 0x19             	  ; (REG_SPBRG, divisor & 0xFF) ; 0x19
          movwf	 0x19            	  ; (REG_SPBRG, divisor & 0xFF) ; 0x99
          movlw	 0x20             	  ; (REG_TXSTA, (1 << TXEN) | (brgh << BRGH)) ; 0x20
          movwf	 0x18            	  ; (REG_TXSTA, (1 << TXEN) | (brgh << BRGH)) ; 0x98
          bcf	 0x03            , 5	  ;  BS(0x80,0x18) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movlw	 0x90             	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x90
          movwf	 0x18            	  ; (REG_RCSTA, (1 << SPEN) | (1 << CREN)) ; 0x18
    ; Begin Of PLC Cycle
l_00016f: btfsc	 0x0C            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x22            , 5	  ; (OP_BSF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
          btfss	 0x0C            , 2	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x22            , 5	  ; (OP_BCF, addrDest, bitDest, nameDest) ; $Y_INTCON_T0IF
l_000173: btfss	 0x0C            , 2	  ; (OP_BTFSS, REG_PIR1, CCP1IF)
          goto	 l_000173	 	  ; (OP_GOTO, PicProgWriteP - 1)
          bcf	 0x0C            , 2	  ; (OP_BCF, REG_PIR1, CCP1IF)
    ; Watchdog reset
          clrwdt	 	 	  ; (OP_CLRWDT)
    ; INIT TABLES
    ; INIT TABLE: signed 0 bit char7seg[129] see above
    ; INIT VARS
    ; INT_IF_BIT_CLEAR $once_0_INIT_VARS
          btfsc	 0x20            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_0_INIT_VARS
          goto	 l_00017b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_0_INIT_VARS
          bsf	 0x20            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_0_INIT_VARS
    ; INT_SET_VARIABLE_TO_LITERAL Ccount3:=0x0(0)
    ; CopyLitToReg
          clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; Ccount3(0x35):=0(0x0)
    ; ======= START RUNG 1 =======
    ; INT_SET_BIT $rung_top
l_00017b: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; start parallel [
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000180	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x88) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISD:=0x0(0)
    ; CopyLitToReg
          clrf	 0x08            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISD(0x88):=0(0x0)
l_000180: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ELEM_MOVE
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000185	 	  ; (OP_GOTO, condFalse)
          bsf	 0x03            , 5	  ;  BS(0x00,0x89) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_SET_VARIABLE_TO_LITERAL #TRISE:=0x0(0)
    ; CopyLitToReg
          clrf	 0x09            	  ; (OP_CLRF, addr + i, 0, comment) ; #TRISE(0x89):=0(0x0)
l_000185: bcf	 0x03            , 5	  ;  BS(0x80,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 2 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T5m 5000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001b1	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T5m 1
    ; CopyRegToReg
          movf	 0x36            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T5m
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00019b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00019b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00019b: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0001a0	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00019f: goto	 l_0001a2	 	  ; (OP_GOTO, isEnd)
l_0001a0: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0001a2: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0001a5	 	  ; (OP_GOTO, ifThen)
i_0001a4: goto	 l_0001a7	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T5m overlap to  overflow to 
l_0001a5: incf	 0x36            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T5m
i_0001a6: goto	 l_0001ad	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T5m:=0x0(0)
    ; CopyLitToReg
l_0001a7: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T5m(0x36):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_1_TCY_T5m
          btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T5m
          goto	 l_0001ac	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_1_TCY_T5m
          bsf	 0x20            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_1_TCY_T5m
i_0001ab: goto	 l_0001ad	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_1_TCY_T5m
l_0001ac: bcf	 0x20            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_1_TCY_T5m
    ; INT_IF_BIT_CLEAR $once_1_TCY_T5m
l_0001ad: btfsc	 0x20            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_1_TCY_T5m
          goto	 l_0001b0	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_0001b0: goto	 l_0001b2	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T5m:=0x0(0)
    ; CopyLitToReg
l_0001b1: clrf	 0x36            	  ; (OP_CLRF, addr + i, 0, comment) ; T5m(0x36):=0(0x0)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT RDigito:=$rung_top
l_0001b2: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish series
    ; 
    ; ======= START RUNG 3 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_READ_ADC
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001d8	 	  ; (OP_GOTO, condFalse)
    ; INT_READ_ADC
          movlw	 0x81             	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x81
          movwf	 0x1F            	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x1F
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          movlw	 0xFF             	  ; (REG_ANSEL, 0xff) ; 0xFF
          movwf	 0x08            	  ; (REG_ANSEL, 0xff) ; 0x188
          movlw	 0x3F             	  ; (REG_ANSELH, 0x3f) ; 0x3F
          movwf	 0x09            	  ; (REG_ANSELH, 0x3f) ; 0x189
          bcf	 0x03            , 5	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP1)
          movlw	 0x1A             	  ; (OP_MOVLW, cyclesToWait)
          movwf	 0x25            	  ; (OP_MOVWF, Scratch1)
l_0001c7: decfsz 0x25            , 1	  ; (OP_DECFSZ, Scratch1, DEST_F)
          goto	 l_0001c7	 	  ; (OP_GOTO, wait)
          bsf	 0x1F            , 1	  ; (OP_BSF, REG_ADCON0, goPos)
l_0001ca: btfsc	 0x1F            , 1	  ; (OP_BTFSC, REG_ADCON0, goPos)
          goto	 l_0001ca	 	  ; (OP_GOTO, spin)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESH, DEST_W)
          movwf	 0x38            	  ; (OP_MOVWF, addr1 + 1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9E) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESL, DEST_W)
          bcf	 0x03            , 5	  ;  BS(0x80,0x37) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movwf	 0x37            	  ; (OP_MOVWF, addr1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
l_0001d8: bcf	 0x03            , 5	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; ] finish series
    ; 
    ; ======= START RUNG 4 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_READ_ADC
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0001fc	 	  ; (OP_GOTO, condFalse)
    ; INT_READ_ADC
          movlw	 0x89             	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x89
          movwf	 0x1F            	  ; (REG_ADCON0, (adcs << adcsPos) | (MuxForAdcVariable(a->name1) << chsPos) | (0 << goPos) | (1 << 0)) ; 0x1F
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | ((refs & 3) << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          movlw	 0xFF             	  ; (REG_ANSEL, 0xff) ; 0xFF
          movwf	 0x08            	  ; (REG_ANSEL, 0xff) ; 0x188
          movlw	 0x3F             	  ; (REG_ANSELH, 0x3f) ; 0x3F
          movwf	 0x09            	  ; (REG_ANSELH, 0x3f) ; 0x189
          bcf	 0x03            , 5	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x25) ; (OP_BCF, REG_STATUS, STATUS_RP1)
          movlw	 0x1A             	  ; (OP_MOVLW, cyclesToWait)
          movwf	 0x25            	  ; (OP_MOVWF, Scratch1)
l_0001eb: decfsz 0x25            , 1	  ; (OP_DECFSZ, Scratch1, DEST_F)
          goto	 l_0001eb	 	  ; (OP_GOTO, wait)
          bsf	 0x1F            , 1	  ; (OP_BSF, REG_ADCON0, goPos)
l_0001ee: btfsc	 0x1F            , 1	  ; (OP_BTFSC, REG_ADCON0, goPos)
          goto	 l_0001ee	 	  ; (OP_GOTO, spin)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESH, DEST_W)
          movwf	 0x3A            	  ; (OP_MOVWF, addr1 + 1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9E) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movf	 0x1E            , 0 	  ; (OP_MOVF, REG_ADRESL, DEST_W)
          bcf	 0x03            , 5	  ;  BS(0x80,0x39) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movwf	 0x39            	  ; (OP_MOVWF, addr1)
          bsf	 0x03            , 5	  ;  BS(0x00,0x9F) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          movlw	 0x80             	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x80
          movwf	 0x1F            	  ; (REG_ADCON1, (1 << 7) | (refs << 4)) ; 0x9F
          bsf	 0x03            , 6	  ;  BS(0x80,0x188) ; (OP_BSF, REG_STATUS, STATUS_RP1)
          clrf	 0x08            	  ; (OP_CLRF, REG_ANSEL)
          clrf	 0x09            	  ; (OP_CLRF, REG_ANSELH)
l_0001fc: bcf	 0x03            , 5	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          bcf	 0x03            , 6	  ;  BS(0x180,0x20) ; (OP_BCF, REG_STATUS, STATUS_RP1)
    ; ] finish series
    ; 
    ; ======= START RUNG 5 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_TCY T1s 1000000
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000233	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES T1s 200
    ; CopyRegToReg
          movf	 0x3B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; T1s
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xC8             	  ; (OP_MOVLW, lNow, 0, comment) ; 200
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 200
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 200
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00021a	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00021a	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00021a: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00021f	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00021e: goto	 l_000221	 	  ; (OP_GOTO, isEnd)
l_00021f: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000221: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000224	 	  ; (OP_GOTO, ifThen)
i_000223: goto	 l_000228	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE T1s overlap to  overflow to 
l_000224: incf	 0x3B            , 1	  ; (OP_INCF, addr, DEST_F, name) ; T1s
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x3C            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; T1s
i_000227: goto	 l_00022f	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_000228: clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3B):=0(0x0)
          clrf	 0x3C            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3B):=0(0x0)
    ; INT_IF_BIT_CLEAR $once_2_TCY_T1s
          btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T1s
          goto	 l_00022e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_2_TCY_T1s
          bsf	 0x20            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_2_TCY_T1s
i_00022d: goto	 l_00022f	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_2_TCY_T1s
l_00022e: bcf	 0x20            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_2_TCY_T1s
    ; INT_IF_BIT_CLEAR $once_2_TCY_T1s
l_00022f: btfsc	 0x20            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_2_TCY_T1s
          goto	 l_000232	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
l_000232: goto	 l_000235	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL T1s:=0x0(0)
    ; CopyLitToReg
l_000233: clrf	 0x3B            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3B):=0(0x0)
          clrf	 0x3C            	  ; (OP_CLRF, addr + i, 0, comment) ; T1s(0x3B):=0(0x0)
    ; ELEM_CTU
    ; INT_IF_BIT_SET $rung_top
l_000235: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000258	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_3_CTU_Ccount3
          btfsc	 0x20            , 5	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
          goto	 l_000257	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_3_CTU_Ccount3
          bsf	 0x20            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
    ; INT_IF_LES Ccount3 3
    ; CopyRegToReg
          movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ccount3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00024c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00024c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00024c: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000251	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000250: goto	 l_000253	 	  ; (OP_GOTO, isEnd)
l_000251: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000253: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000256	 	  ; (OP_GOTO, ifThen)
i_000255: goto	 l_000257	 	  ; (OP_GOTO, ifEnd)
    ; INT_INCREMENT_VARIABLE Ccount3 overlap to  overflow to 
l_000256: incf	 0x35            , 1	  ; (OP_INCF, addr, DEST_F, name) ; Ccount3
l_000257: goto	 l_000259	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_3_CTU_Ccount3
l_000258: bcf	 0x20            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_3_CTU_Ccount3
    ; INT_IF_LES Ccount3 3
    ; CopyRegToReg
l_000259: movf	 0x35            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Ccount3
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; 3
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 3
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00026b	 	  ; (OP_GOTO, notOverflow)
          movf	 0x24            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x28            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00026b	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00026b: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000270	 	  ; (OP_GOTO, is0)
          btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00026f: goto	 l_000272	 	  ; (OP_GOTO, isEnd)
l_000270: btfsc	 0x24            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000272: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000275	 	  ; (OP_GOTO, ifThen)
i_000274: goto	 l_000277	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000275: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
i_000276: goto	 l_000278	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT $rung_top
l_000277: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_0:=$rung_top
l_000278: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT R3s:=$parThis_0
          btfsc	 0x20            , 6	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 7	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 6	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 7	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_RES
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000283	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL Ccount3:=0x0(0)
    ; CopyLitToReg
          clrf	 0x35            	  ; (OP_CLRF, addr + i, 0, comment) ; Ccount3(0x35):=0(0x0)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 6 =======
    ; INT_SET_BIT $rung_top
l_000283: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00033d	 	  ; (OP_GOTO, condFalse)
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN2 381
    ; CopyRegToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x7D             	  ; (OP_MOVLW, lNow, 0, comment) ; 381
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 381
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 381
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 381
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002a1	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002a1	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002a1: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0002a6	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0002a5: goto	 l_0002a8	 	  ; (OP_GOTO, isEnd)
l_0002a6: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0002a8: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0002ab	 	  ; (OP_GOTO, ifThen)
i_0002aa: goto	 l_0002ac	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0002ab: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0002ac: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0002e2	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Temp := AAN2 - 190; ''; ''
    ; CopyRegToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_MULTIPLY Temp := Temp * 75
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_DIVIDE Temp := Temp / 190
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
i_0002d2: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002d3: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_ADD Temp := Temp + 75; ''; ''
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3D            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3E            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_0002e2: bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN2 191
    ; CopyRegToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBF             	  ; (OP_MOVLW, lNow, 0, comment) ; 191
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 191
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 191
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0002f4: bcf	 0x0A            , 3	  ;  PS(0x18,0x02) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0002f5: bcf	 0x0A            , 4	  ;  PS(0x18,0x02) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0002fe	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0002fe	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0002fe: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000303	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000302: goto	 l_000305	 	  ; (OP_GOTO, isEnd)
l_000303: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000305: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000308	 	  ; (OP_GOTO, ifThen)
i_000307: goto	 l_000309	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000308: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000309: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00033d	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Temp := AAN2 - 0; ''; ''
    ; CopyRegToReg
          movf	 0x39            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN2
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_MULTIPLY Temp := Temp * 75
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x4B             	  ; (OP_MOVLW, lNow, 0, comment) ; 75
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 75
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 75
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_DIVIDE Temp := Temp / 190
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xBE             	  ; (OP_MOVLW, lNow, 0, comment) ; 190
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 190
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 190
i_00032e: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00032f: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x3E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Temp
    ; INT_SET_VARIABLE_ADD Temp := Temp + 0; ''; ''
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x3D            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x3E            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 7 =======
    ; INT_SET_BIT $rung_top
l_00033d: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00033e: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00033f: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_PIECEWISE_LINEAR
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0003fa	 	  ; (OP_GOTO, condFalse)
    ; PWL 2
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN0 1024
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 1024
          movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; 1024
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1024
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00035c	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00035c	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00035c: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000361	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000360: goto	 l_000363	 	  ; (OP_GOTO, isEnd)
l_000361: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000363: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000366	 	  ; (OP_GOTO, ifThen)
i_000365: goto	 l_000367	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_000366: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000367: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_00039e	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Setup := AAN0 - 511; ''; ''
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; 511
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 511
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 511
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 511
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_MULTIPLY Setup := Setup * 49
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x31             	  ; (OP_MOVLW, lNow, 0, comment) ; 49
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 49
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 49
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_DIVIDE Setup := Setup / 512
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 512
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 512
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 512
i_00038e: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00038f: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_ADD Setup := Setup + 50; ''; ''
    ; CopyLitToReg
          movlw	 0x32             	  ; (OP_MOVLW, lNow, 0, comment) ; 50
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 50
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 50
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x41            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x42            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; PWL 1
    ; INT_CLEAR_BIT $scratch
l_00039e: bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_LES AAN0 512
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 512
          movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; 512
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 512
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
i_0003b0: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003b1: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0003ba	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0003ba	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0003ba: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0003bf	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0003be: goto	 l_0003c1	 	  ; (OP_GOTO, isEnd)
l_0003bf: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0003c1: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0003c4	 	  ; (OP_GOTO, ifThen)
i_0003c3: goto	 l_0003c5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
l_0003c4: bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0003c5: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_0003fa	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_SUBTRACT Setup := AAN0 - 0; ''; ''
    ; CopyRegToReg
          movf	 0x37            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x38            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; AAN0
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_MULTIPLY Setup := Setup * 50
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x32             	  ; (OP_MOVLW, lNow, 0, comment) ; 50
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 50
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 50
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_DIVIDE Setup := Setup / 511
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; 511
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 511
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 511
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 511
i_0003eb: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003ec: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x41            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x42            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Setup
    ; INT_SET_VARIABLE_ADD Setup := Setup + 0; ''; ''
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
    ; add
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x41            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x42            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; ] finish series
    ; 
    ; ======= START RUNG 8 =======
    ; INT_SET_BIT $rung_top
l_0003fa: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_0003fb: bcf	 0x0A            , 3	  ;  PS(0x18,0x03) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0003fc: bcf	 0x0A            , 4	  ;  PS(0x18,0x03) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R3s
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R3s
          goto	 l_000400	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET Xb4
l_000400: btfss	 0x06            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; Xb4
          goto	 l_000403	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
l_000403: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000415	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x47):=10(0xA)
          movwf	 0x47            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
          clrf	 0x48            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Dezena := Temp / $scratch2
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x49            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
l_000415: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000416: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MOD
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000429	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x47):=10(0xA)
          movwf	 0x47            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
          clrf	 0x48            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Unidade := Temp / $scratch2
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x2A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x4B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
          movf	 0x2B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 9 =======
    ; INT_SET_BIT $rung_top
l_000429: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_00042a: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00042b: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb4
          btfsc	 0x06            , 4	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb4
          goto	 l_00042f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; ELEM_DIV
    ; INT_IF_BIT_SET $rung_top
l_00042f: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000441	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x47):=10(0xA)
          movwf	 0x47            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
          clrf	 0x48            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Dezena := Setup / $scratch2
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x49            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x4A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Dezena
l_000441: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000442: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_MOD
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000455	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch2:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch2(0x47):=10(0xA)
          movwf	 0x47            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
          clrf	 0x48            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch2(0x47):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE Unidade := Setup / $scratch2
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x47            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x48            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch2
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x2A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x4B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
          movf	 0x2B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch6
          movwf	 0x4C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Unidade
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 10 =======
    ; INT_SET_BIT $rung_top
l_000455: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
i_000456: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000457: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_SET RDigito
          btfss	 0x20            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; RDigito
          goto	 l_00045b	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_00045b: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0004c4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=176(0xB0)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=176(0xB0)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x49            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00046c	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4A            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00046c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x49):=128(0x80)
          movwf	 0x49            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x49):=128(0x80)
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x49):=128(0x80)
i_00046b: goto	 l_0004b9	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Dezena 0
    ; CopyRegToReg
l_00046c: movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000484	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000484	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000484: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000489	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000488: goto	 l_00048b	 	  ; (OP_GOTO, isEnd)
l_000489: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_00048b: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00048e	 	  ; (OP_GOTO, ifThen)
i_00048d: goto	 l_000492	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x20(32)
    ; CopyLitToReg
l_00048e: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x49):=32(0x20)
          movwf	 0x49            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x49):=32(0x20)
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x49):=32(0x20)
i_000491: goto	 l_0004b9	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Dezena 129
    ; CopyRegToReg
l_000492: movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0004ab	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0004ab	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0004ab: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0004b0	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0004af: goto	 l_0004b2	 	  ; (OP_GOTO, isEnd)
l_0004b0: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0004b2: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0004b5	 	  ; (OP_GOTO, ifThen)
i_0004b4: goto	 l_0004b6	 	  ; (OP_GOTO, ifEnd)
l_0004b5: goto	 l_0004b9	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Dezena:=0x20(32)
    ; CopyLitToReg
l_0004b6: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Dezena(0x49):=32(0x20)
          movwf	 0x49            	  ; (OP_MOVWF, addr + i, 0, comment) ; Dezena(0x49):=32(0x20)
          clrf	 0x4A            	  ; (OP_CLRF, addr + i, 0, comment) ; Dezena(0x49):=32(0x20)
    ; Scratch0:1 := Index 'Dezena'
    ; CopyRegToReg
l_0004b9: movf	 0x49            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x4A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Dezena
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x4D            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x4E            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x4D            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x4E            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0004c4: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_0004c8: bcf	 0x0A            , 3	  ;  PS(0x18,0x04) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_0004c9: bcf	 0x0A            , 4	  ;  PS(0x18,0x04) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_1
          btfss	 0x21            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_1
          goto	 l_0004ce	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye0
          bcf	 0x09            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye0
i_0004cd: goto	 l_0004cf	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye0
l_0004ce: bsf	 0x09            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye0
    ; INT_COPY_BIT_TO_BIT $parThis_1:=$rung_top
l_0004cf: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye0:=$parThis_1
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x21            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 11 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR RDigito
          btfsc	 0x20            , 3	  ; (OP_BTFSC, addr1, bit1, a->name1) ; RDigito
          goto	 l_0004de	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_7SEG
    ; INT_IF_BIT_SET $rung_top
l_0004de: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000547	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB0(176)
    ; CopyLitToReg
          movlw	 0xB0             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=176(0xB0)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=176(0xB0)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=176(0xB0)
    ; INT_IF_EQU
          movf	 0x4B            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4D            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004ef	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4C            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x4E            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0004ef	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x80(128)
    ; CopyLitToReg
          movlw	 0x80             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x4B):=128(0x80)
          movwf	 0x4B            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x4B):=128(0x80)
          clrf	 0x4C            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x4B):=128(0x80)
i_0004ee: goto	 l_00053c	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Unidade 0
    ; CopyRegToReg
l_0004ef: movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000507	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000507	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000507: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00050c	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00050b: goto	 l_00050e	 	  ; (OP_GOTO, isEnd)
l_00050c: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_00050e: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000511	 	  ; (OP_GOTO, ifThen)
i_000510: goto	 l_000515	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x20(32)
    ; CopyLitToReg
l_000511: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x4B):=32(0x20)
          movwf	 0x4B            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x4B):=32(0x20)
          clrf	 0x4C            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x4B):=32(0x20)
i_000514: goto	 l_00053c	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_LES Unidade 129
    ; CopyRegToReg
l_000515: movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x81             	  ; (OP_MOVLW, lNow, 0, comment) ; 129
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 129
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 129
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00052e	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00052e	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00052e: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000533	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000532: goto	 l_000535	 	  ; (OP_GOTO, isEnd)
l_000533: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000535: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000538	 	  ; (OP_GOTO, ifThen)
i_000537: goto	 l_000539	 	  ; (OP_GOTO, ifEnd)
l_000538: goto	 l_00053c	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL Unidade:=0x20(32)
    ; CopyLitToReg
l_000539: movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; Unidade(0x4B):=32(0x20)
          movwf	 0x4B            	  ; (OP_MOVWF, addr + i, 0, comment) ; Unidade(0x4B):=32(0x20)
          clrf	 0x4C            	  ; (OP_CLRF, addr + i, 0, comment) ; Unidade(0x4B):=32(0x20)
    ; Scratch0:1 := Index 'Unidade'
    ; CopyRegToReg
l_00053c: movf	 0x4B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
          movf	 0x4C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Unidade
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $Scratch0
    ; Index := Index * sovElement '1'
    ; CALL Table 'char7seg' address in flash
          call	 l_000008	 	  ; (OP_CALL, addr2)
          movwf	 0x4D            	  ; (OP_MOVWF, addr1)
    ; Clear upper bytes of dest
          clrf	 0x4E            	  ; (OP_CLRF, addr1 + sovElement + i)
    ; END CALLs
    ; INT_SET_VARIABLE_NOT $scratch := ~$scratch
          comf	 0x4D            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
          comf	 0x4E            , 1	  ; (OP_COMF, addr1 + i, DEST_F)
    ; INT_SET_VARIABLE_TO_VARIABLE #PORTD := $scratch
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x08            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; #PORTD
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_000547: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
i_00054b: bcf	 0x0A            , 3	  ;  PS(0x18,0x05) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00054c: bcf	 0x0A            , 4	  ;  PS(0x18,0x05) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_2
          btfss	 0x21            , 2	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_2
          goto	 l_000551	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye1
          bcf	 0x09            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye1
i_000550: goto	 l_000552	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_BIT Ye1
l_000551: bsf	 0x09            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye1
    ; INT_COPY_BIT_TO_BIT $parThis_2:=$rung_top
l_000552: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 2	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 2	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_COPY_BIT_TO_BIT Ye1:=$parThis_2
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          btfsc	 0x21            , 2	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x09            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x09            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 12 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_LES
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000581	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GEQ Temp Setup
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x42            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x41            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x42            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x42            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000576	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x42            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000576	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000576: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00057b	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00057a: goto	 l_00057d	 	  ; (OP_GOTO, isEnd)
l_00057b: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_00057d: btfss	 0x22            , 6	  ; (OP_BTFSS, addrO, bitO)
          goto	 l_000580	 	  ; (OP_GOTO, ifThen)
i_00057f: goto	 l_000581	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000580: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_TON TTon5s1 2000000
    ; INT_IF_BIT_SET $rung_top
l_000581: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0005ac	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES TTon5s1 400
    ; CopyRegToReg
          movf	 0x4F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; TTon5s1
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x50            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; TTon5s1
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x90             	  ; (OP_MOVLW, lNow, 0, comment) ; 400
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 400
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 400
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 400
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00059d	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00059d	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00059d: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0005a2	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0005a1: goto	 l_0005a4	 	  ; (OP_GOTO, isEnd)
l_0005a2: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0005a4: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0005a7	 	  ; (OP_GOTO, ifThen)
i_0005a6: goto	 l_0005ab	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_0005a7: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_INCREMENT_VARIABLE TTon5s1 overlap to  overflow to 
          incf	 0x4F            , 1	  ; (OP_INCF, addr, DEST_F, name) ; TTon5s1
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x50            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; TTon5s1
l_0005ab: goto	 l_0005ae	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL TTon5s1:=0x0(0)
    ; CopyLitToReg
l_0005ac: clrf	 0x4F            	  ; (OP_CLRF, addr + i, 0, comment) ; TTon5s1(0x4F):=0(0x0)
          clrf	 0x50            	  ; (OP_CLRF, addr + i, 0, comment) ; TTon5s1(0x4F):=0(0x0)
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0005ae: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0005b5	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc0
          bsf	 0x07            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc0
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0005b5: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0005bc	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Ye2
          bsf	 0x09            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; Ye2
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0005bc: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0005c3	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Ya5
          bsf	 0x05            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; Ya5
    ; INT_COPY_BIT_TO_BIT $parThis_3:=$rung_top
l_0005c3: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 3	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 3	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_3
          btfss	 0x21            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_3
          goto	 l_0005ca	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc2
          bsf	 0x07            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc2
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 13 =======
    ; INT_SET_BIT $rung_top
l_0005ca: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_ADD
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_0005e9	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_ADD Control := Temp + 1; '$overlap'; 'ROverflowFlagV'
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 1
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 1
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 1
    ; add
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x24            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x25            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0005e5	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0005e5	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 7	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; CopyRegToReg
l_0005e5: movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x51            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Control
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; addrB
          movwf	 0x52            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; Control
    ; ] finish series
    ; 
    ; ======= START RUNG 14 =======
    ; INT_SET_BIT $rung_top
l_0005e9: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_GRT
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00060d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LEQ Control Setup
    ; CopyRegToReg
          movf	 0x41            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x42            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Setup
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x51            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x52            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x52            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000602	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x52            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000602	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000602: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000607	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000606: goto	 l_000609	 	  ; (OP_GOTO, isEnd)
l_000607: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000609: btfss	 0x22            , 6	  ; (OP_BTFSS, addrO, bitO)
          goto	 l_00060c	 	  ; (OP_GOTO, ifThen)
i_00060b: goto	 l_00060d	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_00060c: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_TON TTon5s 2000000
    ; INT_IF_BIT_SET $rung_top
l_00060d: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000638	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES TTon5s 400
    ; CopyRegToReg
          movf	 0x53            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; TTon5s
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x54            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; TTon5s
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x90             	  ; (OP_MOVLW, lNow, 0, comment) ; 400
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 400
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; 400
          movwf	 0x29            	  ; (OP_MOVWF, addr + i, 0, comment) ; 400
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000629	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000629	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000629: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_00062e	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_00062d: goto	 l_000630	 	  ; (OP_GOTO, isEnd)
l_00062e: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000630: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000633	 	  ; (OP_GOTO, ifThen)
i_000632: goto	 l_000637	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000633: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; INT_INCREMENT_VARIABLE TTon5s overlap to  overflow to 
          incf	 0x53            , 1	  ; (OP_INCF, addr, DEST_F, name) ; TTon5s
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x54            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; TTon5s
l_000637: goto	 l_00063a	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL TTon5s:=0x0(0)
    ; CopyLitToReg
l_000638: clrf	 0x53            	  ; (OP_CLRF, addr + i, 0, comment) ; TTon5s(0x53):=0(0x0)
          clrf	 0x54            	  ; (OP_CLRF, addr + i, 0, comment) ; TTon5s(0x53):=0(0x0)
    ; start parallel [
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_00063a: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000641	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc0
          bcf	 0x07            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc0
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000641: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000648	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ye2
          bcf	 0x09            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; Ye2
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_000648: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_00064f	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Ya5
          bcf	 0x05            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; Ya5
    ; INT_COPY_BIT_TO_BIT $parThis_4:=$rung_top
l_00064f: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 4	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 4	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_COIL
    ; INT_IF_BIT_SET $parThis_4
          btfss	 0x21            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_4
          goto	 l_000656	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc2
          bcf	 0x07            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc2
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 15 =======
    ; INT_SET_BIT $rung_top
l_000656: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_UART_RECV_AVAIL
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_00065d	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ELEM_UART_RECV
    ; INT_IF_BIT_SET $rung_top
l_00065d: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000674	 	  ; (OP_GOTO, condFalse)
          btfsc	 0x0C            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x0C            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000674	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL char:=0x0(0)
    ; CopyLitToReg
          clrf	 0x55            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x55):=0(0x0)
          clrf	 0x56            	  ; (OP_CLRF, addr + i, 0, comment) ; char(0x55):=0(0x0)
    ; INT_UART_RECV1
          btfss	 0x0C            , 5	  ; (OP_BTFSS, REG_PIR1, 5)
          goto	 l_000674	 	  ; (OP_GOTO, done)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movwf	 0x55            	  ; (OP_MOVWF, addr1)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, REG_RCSTA, 1)
          goto	 l_000670	 	  ; (OP_GOTO, yesError)
          btfsc	 0x18            , 2	  ; (OP_BTFSC, REG_RCSTA, 2)
          goto	 l_000670	 	  ; (OP_GOTO, yesError)
i_00066f: goto	 l_000674	 	  ; (OP_GOTO, done)
l_000670: movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          movf	 0x1A            , 0 	  ; (OP_MOVF, REG_RCREG, DEST_W)
          bcf	 0x18            , 4	  ; (OP_BCF, REG_RCSTA, 4)
          bsf	 0x18            , 4	  ; (OP_BSF, REG_RCSTA, 4)
    ; ] finish series
    ; 
    ; ======= START RUNG 16 =======
    ; INT_SET_BIT $rung_top
l_000674: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR R3s
          btfsc	 0x20            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; R3s
          goto	 l_000678	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; start parallel [
    ; INT_CLEAR_BIT $parOut_0
l_000678: bcf	 0x21            , 5	  ; (OP_BCF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
          btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_LEQ
    ; INT_IF_BIT_SET $parThis_5
          btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_00069f	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_GRT Temp 9
    ; CopyLitToReg
          movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; 9
          movwf	 0x24            	  ; (OP_MOVWF, addr + i, 0, comment) ; 9
          clrf	 0x25            	  ; (OP_CLRF, addr + i, 0, comment) ; 9
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x3D            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x3E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x3E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000694	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x3E            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000694	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000694: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000699	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000698: goto	 l_00069b	 	  ; (OP_GOTO, isEnd)
l_000699: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_00069b: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00069e	 	  ; (OP_GOTO, ifThen)
i_00069d: goto	 l_00069f	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_5
l_00069e: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $parThis_5
l_00069f: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_0006a8	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_4_FMTD_STR
          btfsc	 0x21            , 7	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_4_FMTD_STR
          goto	 l_0006a7	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_4_FMTD_STR
          bsf	 0x21            , 7	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_4_FMTD_STR
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_0_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x57            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x57):=0(0x0)
          clrf	 0x58            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_0_seq(0x57):=0(0x0)
    ; INT_SET_BIT $fmtd_3_doSend
          bsf	 0x22            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_3_doSend
l_0006a7: goto	 l_0006a9	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_4_FMTD_STR
l_0006a8: bcf	 0x21            , 7	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_4_FMTD_STR
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_0_seq
    ; CopyRegToReg
l_0006a9: movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x59            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_0_seq 11
    ; CopyRegToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0006c6	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0006c6	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0006c6: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0006cb	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0006ca: goto	 l_0006cd	 	  ; (OP_GOTO, isEnd)
l_0006cb: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0006cd: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0006d0	 	  ; (OP_GOTO, ifThen)
i_0006cf: goto	 l_0006d1	 	  ; (OP_GOTO, ifEnd)
l_0006d0: goto	 l_0006d4	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_0006d1: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x59            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x5A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_0006d4: btfss	 0x22            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_0006e5	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x21) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_0006e5	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x59            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x5A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_0006e5: clrf	 0x4D            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=0(0x0)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=0(0x0)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0006f2	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0006f2	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6E(110)
    ; CopyLitToReg
          movlw	 0x6E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=110(0x6E)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=110(0x6E)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=110(0x6E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_0006f2: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=1(0x1)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000700	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000700	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=48(0x30)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=48(0x30)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=48(0x30)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_000700: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=2(0x2)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=2(0x2)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=2(0x2)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00070e	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00070e	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x2E(46)
    ; CopyLitToReg
          movlw	 0x2E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=46(0x2E)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=46(0x2E)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=46(0x2E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_00070e: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=3(0x3)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=3(0x3)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=3(0x3)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00071c	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00071c	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x76(118)
    ; CopyLitToReg
          movlw	 0x76             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=118(0x76)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=118(0x76)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=118(0x76)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_00071c: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=4(0x4)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=4(0x4)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=4(0x4)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00072a	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00072a	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=97(0x61)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=97(0x61)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_00072a: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=5(0x5)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=5(0x5)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=5(0x5)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000738	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000738	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6C(108)
    ; CopyLitToReg
          movlw	 0x6C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=108(0x6C)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=108(0x6C)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=108(0x6C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_000738: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=6(0x6)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=6(0x6)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=6(0x6)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000746	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000746	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3D(61)
    ; CopyLitToReg
          movlw	 0x3D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=61(0x3D)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=61(0x3D)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=61(0x3D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_000746: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=7(0x7)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=7(0x7)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=7(0x7)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000753	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000753	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000753: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000788	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_1_convertState := Temp
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x5D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x5E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_1_convertState
    ; INT_SET_BIT $fmtd_2_isLeadingZero
          bsf	 0x22            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_2_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=1(0x1)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_1_convertState / $scratch
    ; CopyRegToReg
          movf	 0x5D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_1_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000772: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000773: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_1_convertState := $fmtd_1_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x5D            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x5E            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=48(0x30)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x5B            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x5C            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_000788: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=8(0x8)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=8(0x8)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=8(0x8)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_00078d: bcf	 0x0A            , 3	  ;  PS(0x18,0x07) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00078e: bcf	 0x0A            , 4	  ;  PS(0x18,0x07) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000798	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000798	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_000798: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=9(0x9)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=9(0x9)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=9(0x9)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007a6	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007a6	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_0007a6: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=10(0xA)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007b4	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0007b4	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_0007b4: movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0007cc	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0007cc	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0007cc: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0007d1	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0007d0: goto	 l_0007d3	 	  ; (OP_GOTO, isEnd)
l_0007d1: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0007d3: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0007d6	 	  ; (OP_GOTO, ifThen)
i_0007d5: goto	 l_0007d7	 	  ; (OP_GOTO, ifEnd)
l_0007d6: goto	 l_0007e2	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_0007d7: btfss	 0x22            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_0007e2	 	  ; (OP_GOTO, condFalse)
l_0007d9: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0007d9	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x5B) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_0_seq overlap to  overflow to 
          incf	 0x57            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_0_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x58            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_0_seq
    ; INT_CLEAR_BIT $parThis_5
l_0007e2: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_LES $fmtd_0_seq 11
    ; CopyRegToReg
          movf	 0x57            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x58            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_0_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; 11
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 11
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 11
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0007fc	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0007fc	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
l_0007fc: bsf	 0x0A            , 3	  ;  PS(0x07,0x08) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_0007fd: bsf	 0x0A            , 3	  ;  PS(0x07,0x08) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
    ; XorBit
          btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000803	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000802: goto	 l_000805	 	  ; (OP_GOTO, isEnd)
l_000803: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000805: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000808	 	  ; (OP_GOTO, ifThen)
i_000807: goto	 l_00080c	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_3_doSend
l_000808: btfss	 0x22            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_3_doSend
          goto	 l_00080b	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parThis_5
          bsf	 0x21            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_5
l_00080b: goto	 l_00080d	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_3_doSend
l_00080c: bcf	 0x22            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_3_doSend
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_5
l_00080d: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000810	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $parThis_5:=$rung_top
l_000810: btfsc	 0x20            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x21            , 6	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x20            , 1	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x21            , 6	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; start series [
    ; ELEM_GEQ
    ; INT_IF_BIT_SET $parThis_5
          btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_00083a	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_LES Temp 10
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; 10
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 10
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 10
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_00082f	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_00082f	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_00082f: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000834	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000833: goto	 l_000836	 	  ; (OP_GOTO, isEnd)
l_000834: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000836: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_000839	 	  ; (OP_GOTO, ifThen)
i_000838: goto	 l_00083a	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $parThis_5
l_000839: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; ELEM_FORMATTED_STRING
    ; INT_IF_BIT_SET $parThis_5
l_00083a: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_000843	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_BIT_CLEAR $once_5_FMTD_STR
          btfsc	 0x22            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $once_5_FMTD_STR
          goto	 l_000842	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $once_5_FMTD_STR
          bsf	 0x22            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; $once_5_FMTD_STR
    ; INT_SET_VARIABLE_TO_LITERAL $fmtd_4_seq:=0x0(0)
    ; CopyLitToReg
          clrf	 0x5F            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_4_seq(0x5F):=0(0x0)
          clrf	 0x60            	  ; (OP_CLRF, addr + i, 0, comment) ; $fmtd_4_seq(0x5F):=0(0x0)
    ; INT_SET_BIT $fmtd_7_doSend
          bsf	 0x22            , 3	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_7_doSend
l_000842: goto	 l_000844	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $once_5_FMTD_STR
l_000843: bcf	 0x22            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; $once_5_FMTD_STR
    ; INT_SET_VARIABLE_TO_VARIABLE $seqScratch := $fmtd_4_seq
    ; CopyRegToReg
l_000844: movf	 0x5F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x59            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
          movf	 0x60            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x5A            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $seqScratch
    ; INT_IF_LES $fmtd_4_seq 12
    ; CopyRegToReg
          movf	 0x5F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x60            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_000861	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_000861	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_000861: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_000866	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_000865: goto	 l_000868	 	  ; (OP_GOTO, isEnd)
l_000866: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_000868: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_00086b	 	  ; (OP_GOTO, ifThen)
i_00086a: goto	 l_00086c	 	  ; (OP_GOTO, ifEnd)
l_00086b: goto	 l_00086f	 	  ; (OP_GOTO, endBlock)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
l_00086c: movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x59            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x5A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_00086f: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_000880	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_UART_SEND_READY
          bcf	 0x03            , 1	  ; (OP_BCF, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
          btfsc	 0x18            , 1	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x03            , 1	  ; (OP_BSF, 0x03, 1)
          bcf	 0x03            , 5	  ;  BS(0x80,0x21) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          btfsc	 0x03            , 1	  ; (OP_BTFSC, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bsf	 0x21            , 0	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x03            , 1	  ; (OP_BTFSS, 0x03, 1, "STATUS_DC") ; STATUS_DC
          bcf	 0x21            , 0	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; INT_IF_BIT_CLEAR $scratch
          btfsc	 0x21            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; $scratch
          goto	 l_000880	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $seqScratch:=0xFFFFFFFF(-1)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x59            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
          movwf	 0x5A            	  ; (OP_MOVWF, addr + i, 0, comment) ; $seqScratch(0x59):=-1(0xFFFFFFFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x0(0)
    ; CopyLitToReg
l_000880: clrf	 0x4D            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=0(0x0)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=0(0x0)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00088d	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00088d	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6E(110)
    ; CopyLitToReg
          movlw	 0x6E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=110(0x6E)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=110(0x6E)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=110(0x6E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
l_00088d: movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=1(0x1)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00089b	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00089b	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=48(0x30)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=48(0x30)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=48(0x30)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x2(2)
    ; CopyLitToReg
l_00089b: movlw	 0x02             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=2(0x2)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=2(0x2)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=2(0x2)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008a9	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008a9	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x2E(46)
    ; CopyLitToReg
          movlw	 0x2E             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=46(0x2E)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=46(0x2E)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=46(0x2E)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x3(3)
    ; CopyLitToReg
l_0008a9: movlw	 0x03             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=3(0x3)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=3(0x3)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=3(0x3)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008b7	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008b7	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x76(118)
    ; CopyLitToReg
          movlw	 0x76             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=118(0x76)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=118(0x76)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=118(0x76)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x4(4)
    ; CopyLitToReg
l_0008b7: movlw	 0x04             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=4(0x4)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=4(0x4)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=4(0x4)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008c5	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008c5	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x61(97)
    ; CopyLitToReg
          movlw	 0x61             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=97(0x61)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=97(0x61)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=97(0x61)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x5(5)
    ; CopyLitToReg
l_0008c5: movlw	 0x05             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=5(0x5)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=5(0x5)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=5(0x5)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008d3	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008d3	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x6C(108)
    ; CopyLitToReg
          movlw	 0x6C             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=108(0x6C)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=108(0x6C)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=108(0x6C)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x6(6)
    ; CopyLitToReg
l_0008d3: movlw	 0x06             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=6(0x6)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=6(0x6)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=6(0x6)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008e1	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008e1	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x3D(61)
    ; CopyLitToReg
          movlw	 0x3D             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=61(0x3D)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=61(0x3D)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=61(0x3D)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x7(7)
    ; CopyLitToReg
l_0008e1: movlw	 0x07             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=7(0x7)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=7(0x7)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=7(0x7)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ee	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_0008ee	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_0008ee: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000935	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_VARIABLE $fmtd_5_convertState := Temp
    ; CopyRegToReg
          movf	 0x3D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x61            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_5_convertState
          movf	 0x3E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Temp
          movwf	 0x62            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $fmtd_5_convertState
    ; INT_SET_BIT $fmtd_6_isLeadingZero
          bsf	 0x22            , 4	  ; (OP_BSF, addr1, bit1, a->name1) ; $fmtd_6_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
          movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=10(0xA)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_5_convertState / $scratch
    ; CopyRegToReg
          movf	 0x61            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x62            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_000900: bcf	 0x0A            , 3	  ;  PS(0x08,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00090e: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00090f: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_5_convertState := $fmtd_5_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x61            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x62            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=48(0x30)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x5B            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x5C            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5B            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000926: bsf	 0x0A            , 3	  ;  PS(0x10,0x09) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_000927: bcf	 0x0A            , 4	  ;  PS(0x10,0x09) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000934	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5C            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000934	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_6_isLeadingZero
          btfss	 0x22            , 4	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_6_isLeadingZero
          goto	 l_000933	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0x20(32)
    ; CopyLitToReg
          movlw	 0x20             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=32(0x20)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=32(0x20)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=32(0x20)
l_000933: goto	 l_000935	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_6_isLeadingZero
l_000934: bcf	 0x22            , 4	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_6_isLeadingZero
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x8(8)
    ; CopyLitToReg
l_000935: movlw	 0x08             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=8(0x8)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=8(0x8)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=8(0x8)
    ; INT_CLEAR_BIT $scratch
          bcf	 0x21            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000942	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000942	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_BIT $scratch
          bsf	 0x21            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; $scratch
    ; INT_IF_BIT_SET $scratch
l_000942: btfss	 0x21            , 0	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $scratch
          goto	 l_000973	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x1(1)
    ; CopyLitToReg
          movlw	 0x01             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=1(0x1)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=1(0x1)
    ; INT_SET_VARIABLE_DIVIDE $charToUart := $fmtd_5_convertState / $scratch
    ; CopyRegToReg
          movf	 0x61            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x62            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_5_convertState
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x28            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x29            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00094f: bcf	 0x0A            , 3	  ;  PS(0x09,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
          call	 l_0000c1	 	  ; (OP_CALL, addr, 0, comment) ; DivideRoutineAddress
    ; CopyRegToReg
          movf	 0x24            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5B            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
          movf	 0x25            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch0
          movwf	 0x5C            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $charToUart
    ; INT_SET_VARIABLE_MULTIPLY $scratch := $scratch * $charToUart
    ; CopyRegToReg
          movf	 0x4D            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x26            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x4E            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $scratch
          movwf	 0x27            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyRegToReg
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5C            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $charToUart
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
i_00095d: bcf	 0x0A            , 3	  ;  PS(0x18,0x00) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_00095e: bcf	 0x0A            , 4	  ;  PS(0x18,0x00) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          call	 l_000091	 	  ; (OP_CALL, addr, 0, comment) ; MultiplyRoutineAddress
    ; CopyRegToReg
          movf	 0x26            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4D            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
          movf	 0x27            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; Scratch2
          movwf	 0x4E            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $scratch
    ; INT_SET_VARIABLE_SUBTRACT $fmtd_5_convertState := $fmtd_5_convertState - $scratch; ''; ''
    ; sub_
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x61            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x62            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x30(48)
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=48(0x30)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=48(0x30)
    ; INT_SET_VARIABLE_ADD $charToUart := $charToUart + $scratch; ''; ''
    ; add
          movf	 0x4D            , 0 	  ; (OP_MOVF, a, DEST_W)
          addwf	 0x5B            , 1	  ; (OP_ADDWF, b, DEST_F)
          movf	 0x4E            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfsc	 0x03            , 0	  ; (OP_BTFSC, REG_STATUS, STATUS_C)
          incfsz 0x4E            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          addwf	 0x5C            , 1	  ; (OP_ADDWF, b + 1, DEST_F)
    ; CopyRegToReg
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0x9(9)
    ; CopyLitToReg
l_000973: movlw	 0x09             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=9(0x9)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=9(0x9)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=9(0x9)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
i_000978: bsf	 0x0A            , 3	  ;  PS(0x10,0x09) ; _^ ; (addr + n, OP_BSF, REG_PCLATH, BIT3, "_^") ; 
i_000979: bcf	 0x0A            , 4	  ;  PS(0x10,0x09) ; v_ ; (addr + n, OP_BCF, REG_PCLATH, BIT4, "v_") ; 
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000983	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000983	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xA(10)
    ; CopyLitToReg
l_000983: movlw	 0x0A             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=10(0xA)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=10(0xA)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000991	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000991	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_SET_VARIABLE_TO_LITERAL $scratch:=0xB(11)
    ; CopyLitToReg
l_000991: movlw	 0x0B             	  ; (OP_MOVLW, lNow, 0, comment) ; $scratch(0x4D):=11(0xB)
          movwf	 0x4D            	  ; (OP_MOVWF, addr + i, 0, comment) ; $scratch(0x4D):=11(0xB)
          clrf	 0x4E            	  ; (OP_CLRF, addr + i, 0, comment) ; $scratch(0x4D):=11(0xB)
    ; INT_IF_EQU
          movf	 0x4D            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x59            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00099f	 	  ; (OP_GOTO, ifEnd)
          movf	 0x4E            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x5A            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_00099f	 	  ; (OP_GOTO, ifEnd)
    ; INT_SET_VARIABLE_TO_LITERAL $charToUart:=0xFF(255)
    ; CopyLitToReg
          movlw	 0xFF             	  ; (OP_MOVLW, lNow, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          movwf	 0x5B            	  ; (OP_MOVWF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
          clrf	 0x5C            	  ; (OP_CLRF, addr + i, 0, comment) ; $charToUart(0x5B):=255(0xFF)
    ; INT_IF_LES $seqScratch 0
    ; CopyRegToReg
l_00099f: movf	 0x59            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x5A            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $seqScratch
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          clrf	 0x28            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 0
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009b7	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009b7	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009b7: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009bc	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0009bb: goto	 l_0009be	 	  ; (OP_GOTO, isEnd)
l_0009bc: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0009be: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0009c1	 	  ; (OP_GOTO, ifThen)
i_0009c0: goto	 l_0009c2	 	  ; (OP_GOTO, ifEnd)
l_0009c1: goto	 l_0009cd	 	  ; (OP_GOTO, endBlock)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_0009c2: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_0009cd	 	  ; (OP_GOTO, condFalse)
l_0009c4: bsf	 0x03            , 5	  ;  BS(0x00,0x98) ; (OP_BSF, REG_STATUS, STATUS_RP0)
    ; INT_UART_SEND1
          btfss	 0x18            , 1	  ; (OP_BTFSS, REG_TXSTA, 1)
          goto	 l_0009c4	 	  ; (OP_GOTO, isBusy)
          bcf	 0x03            , 5	  ;  BS(0x80,0x5B) ; (OP_BCF, REG_STATUS, STATUS_RP0)
          movf	 0x5B            , 0 	  ; (OP_MOVF, addr1, DEST_W)
          movwf	 0x19            	  ; (OP_MOVWF, REG_TXREG)
    ; INT_INCREMENT_VARIABLE $fmtd_4_seq overlap to  overflow to 
          incf	 0x5F            , 1	  ; (OP_INCF, addr, DEST_F, name) ; $fmtd_4_seq
          btfsc	 0x03            , 2	  ; (OP_BTFSC, 0x03, 2)
          incf	 0x60            , 1	  ; (OP_INCF, addr + 1, DEST_F, name) ; $fmtd_4_seq
    ; INT_CLEAR_BIT $parThis_5
l_0009cd: bcf	 0x21            , 6	  ; (OP_BCF, addr1, bit1, a->name1) ; $parThis_5
    ; INT_IF_LES $fmtd_4_seq 12
    ; CopyRegToReg
          movf	 0x5F            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x24            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
          movf	 0x60            , 0 	  ; (OP_MOVF, addr2 + i, DEST_W, name2) ; $fmtd_4_seq
          movwf	 0x25            	  ; (OP_MOVWF, addr1 + i, 0, name1) ; $CopyArgToReg
    ; CopyLitToReg
          movlw	 0x0C             	  ; (OP_MOVLW, lNow, 0, comment) ; 12
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; 12
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; 12
          bcf	 0x22            , 6	  ; (OP_BCF, addrO, bitO, "$overflow") ; $overflow
    ; save sign
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
    ; sub_
          movf	 0x28            , 0 	  ; (OP_MOVF, a, DEST_W)
          subwf	 0x24            , 1	  ; (OP_SUBWF, b, DEST_W_F)
          movf	 0x29            , 0 	  ; (OP_MOVF, a + 1, DEST_W)
          btfss	 0x03            , 0	  ; (OP_BTFSS, REG_STATUS, STATUS_C)
          incfsz 0x29            , 0	  ; (OP_INCFSZ, a + 1, DEST_W)
          subwf	 0x25            , 1	  ; (OP_SUBWF, b + 1, DEST_W_F)
    ; check sign
          btfss	 0x23            , 7	  ; (OP_BTFSS, ScratchS, 7)
          goto	 l_0009e7	 	  ; (OP_GOTO, notOverflow)
          movf	 0x25            , 0 	  ; (OP_MOVF, b + sov - 1, DEST_W)
          xorwf	 0x29            , 0	  ; (OP_XORWF, a + sov - 1, DEST_W)
          movwf	 0x23            	  ; (OP_MOVWF, ScratchS)
          btfsc	 0x23            , 7	  ; (OP_BTFSC, ScratchS, 7)
          goto	 l_0009e7	 	  ; (OP_GOTO, notOverflow)
          bsf	 0x22            , 6	  ; (OP_BSF, addr, bit, "$overflow") ; $overflow
    ; XorBit
l_0009e7: btfss	 0x22            , 6	  ; (OP_BTFSS, addrDest, bitDest)
          goto	 l_0009ec	 	  ; (OP_GOTO, is0)
          btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bcf	 0x22            , 6	  ; (OP_BCF, addrDest, bitDest)
i_0009eb: goto	 l_0009ee	 	  ; (OP_GOTO, isEnd)
l_0009ec: btfsc	 0x25            , 7	  ; (OP_BTFSC, addrSrc, bitSrc)
          bsf	 0x22            , 6	  ; (OP_BSF, addrDest, bitDest)
l_0009ee: btfsc	 0x22            , 6	  ; (OP_BTFSC, addrO, bitO)
          goto	 l_0009f1	 	  ; (OP_GOTO, ifThen)
i_0009f0: goto	 l_0009f5	 	  ; (OP_GOTO, ifEnd)
    ; INT_IF_BIT_SET $fmtd_7_doSend
l_0009f1: btfss	 0x22            , 3	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $fmtd_7_doSend
          goto	 l_0009f4	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parThis_5
          bsf	 0x21            , 6	  ; (OP_BSF, addr1, bit1, a->name1) ; $parThis_5
l_0009f4: goto	 l_0009f6	 	  ; (OP_GOTO, endBlock)
    ; INT_CLEAR_BIT $fmtd_7_doSend
l_0009f5: bcf	 0x22            , 3	  ; (OP_BCF, addr1, bit1, a->name1) ; $fmtd_7_doSend
    ; ] finish series
    ; INT_IF_BIT_SET $parThis_5
l_0009f6: btfss	 0x21            , 6	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $parThis_5
          goto	 l_0009f9	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT $parOut_0
          bsf	 0x21            , 5	  ; (OP_BSF, addr1, bit1, a->name1) ; $parOut_0
    ; INT_COPY_BIT_TO_BIT $rung_top:=$parOut_0
l_0009f9: btfsc	 0x21            , 5	  ; (OP_BTFSC, addrSrc, bitSrc, nameSrc)
          bsf	 0x20            , 1	  ; (OP_BSF, addrDest, bitDest, nameDest)
          btfss	 0x21            , 5	  ; (OP_BTFSS, addrSrc, bitSrc, nameSrc)
          bcf	 0x20            , 1	  ; (OP_BCF, addrDest, bitDest, nameDest)
    ; ] finish parallel
    ; ] finish series
    ; 
    ; ======= START RUNG 17 =======
    ; INT_SET_BIT $rung_top
          bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a0d	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x30             	  ; (OP_MOVLW, lNow, 0, comment) ; '0'
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; '0'
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; '0'
          movf	 0x55            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x28            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a0c	 	  ; (OP_GOTO, ifThen)
          movf	 0x56            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x29            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a0c	 	  ; (OP_GOTO, ifThen)
i_000a0b: goto	 l_000a0d	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000a0c: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a0d: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a10	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc0
          bsf	 0x07            , 0	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc0
    ; ] finish series
    ; 
    ; ======= START RUNG 18 =======
    ; INT_SET_BIT $rung_top
l_000a10: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_EQU
    ; INT_IF_BIT_SET $rung_top
          btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a20	 	  ; (OP_GOTO, condFalse)
    ; INT_IF_NEQ
    ; CopyLitToReg
          movlw	 0x31             	  ; (OP_MOVLW, lNow, 0, comment) ; '1'
          movwf	 0x28            	  ; (OP_MOVWF, addr + i, 0, comment) ; '1'
          clrf	 0x29            	  ; (OP_CLRF, addr + i, 0, comment) ; '1'
          movf	 0x55            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x28            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a1f	 	  ; (OP_GOTO, ifThen)
          movf	 0x56            , 0 	  ; (OP_MOVF, addrA + i, DEST_W)
          subwf	 0x29            , 0	  ; (OP_SUBWF, addrB + i, DEST_W)
          btfss	 0x03            , 2	  ; (OP_BTFSS, 0x03, 2)
          goto	 l_000a1f	 	  ; (OP_GOTO, ifThen)
i_000a1e: goto	 l_000a20	 	  ; (OP_GOTO, ifEnd)
    ; INT_CLEAR_BIT $rung_top
l_000a1f: bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a20: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a23	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc0
          bcf	 0x07            , 0	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc0
    ; ] finish series
    ; 
    ; ======= START RUNG 19 =======
    ; INT_SET_BIT $rung_top
l_000a23: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb2
          btfsc	 0x06            , 2	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb2
          goto	 l_000a27	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a27: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a2a	 	  ; (OP_GOTO, condFalse)
    ; INT_SET_BIT Yc2
          bsf	 0x07            , 2	  ; (OP_BSF, addr1, bit1, a->name1) ; Yc2
    ; ] finish series
    ; 
    ; ======= START RUNG 20 =======
    ; INT_SET_BIT $rung_top
l_000a2a: bsf	 0x20            , 1	  ; (OP_BSF, addr1, bit1, a->name1) ; $rung_top
    ; start series [
    ; ELEM_CONTACTS
    ; INT_IF_BIT_CLEAR Xb0
          btfsc	 0x06            , 0	  ; (OP_BTFSC, addr1, bit1, a->name1) ; Xb0
          goto	 l_000a2e	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT $rung_top
          bcf	 0x20            , 1	  ; (OP_BCF, addr1, bit1, a->name1) ; $rung_top
    ; ELEM_COIL
    ; INT_IF_BIT_SET $rung_top
l_000a2e: btfss	 0x20            , 1	  ; (OP_BTFSS, addr1, bit1, a->name1) ; $rung_top
          goto	 l_000a31	 	  ; (OP_GOTO, condFalse)
    ; INT_CLEAR_BIT Yc2
          bcf	 0x07            , 2	  ; (OP_BCF, addr1, bit1, a->name1) ; Yc2
l_000a31: bcf	 0x0A            , 3	  ;  PS(0x0A,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
i_000a32: bcf	 0x0A            , 3	  ;  PS(0x0A,0x01) ; _v ; (addr + n, OP_BCF, REG_PCLATH, BIT3, "_v") ; 
    ; ] finish series
    ; Latest INT_OP here
    ; GOTO next PLC cycle
i_000a33: goto	 l_00016f	 	  ; (OP_GOTO, BeginOfPLCCycle)
l_000a34: goto	 l_000a34	 	  ; (OP_GOTO, PicProgWriteP)
	END

;|  # | Name                                                    | Size      | Address      | Bit # |
;|Variables: 105
;|  2 | #PORTD                                            	|   1 byte  | 0x0008       |
;|  6 | #TRISD                                            	|   1 byte  | 0x0088       |
;|  7 | #TRISE                                            	|   1 byte  | 0x0089       |
;|  9 | $charToUart                                       	|   2 byte  | 0x005B       |
;| 10 | $fmtd_0_seq                                       	|   2 byte  | 0x0057       |
;| 11 | $fmtd_1_convertState                              	|   2 byte  | 0x005D       |
;| 12 | $fmtd_4_seq                                       	|   2 byte  | 0x005F       |
;| 13 | $fmtd_5_convertState                              	|   2 byte  | 0x0061       |
;| 14 | $scratch                                          	|   2 byte  | 0x004D       |
;| 15 | $scratch2                                         	|   2 byte  | 0x0047       |
;| 16 | $seqScratch                                       	|   2 byte  | 0x0059       |
;| 24 | 190                                               	|   2 byte  | 0x003F       |
;| 29 | 511                                               	|   2 byte  | 0x0045       |
;| 30 | 512                                               	|   2 byte  | 0x0043       |
;| 31 | AAN0                                              	|   2 byte  | 0x0037       |
;| 33 | AAN2                                              	|   2 byte  | 0x0039       |
;| 44 | Ccount3                                           	|   1 byte  | 0x0035       |
;| 46 | Control                                           	|   2 byte  | 0x0051       |
;| 47 | Dezena                                            	|   2 byte  | 0x0049       |
;| 52 | Setup                                             	|   2 byte  | 0x0041       |
;| 55 | T1s                                               	|   2 byte  | 0x003B       |
;| 56 | T5m                                               	|   1 byte  | 0x0036       |
;| 58 | TTon5s                                            	|   2 byte  | 0x0053       |
;| 59 | TTon5s1                                           	|   2 byte  | 0x004F       |
;| 60 | Temp                                              	|   2 byte  | 0x003D       |
;| 64 | Unidade                                           	|   2 byte  | 0x004B       |
;| 85 | char                                              	|   2 byte  | 0x0055       |
;| 86 | char7seg                                          	| 129 byte  | 0x0008       |

;|Internal Relays: 24
;|  0 | $once_0_INIT_VARS                                 	|   1 bit   | 0x0020       | 0     |
;|  1 | $rung_top                                         	|   1 bit   | 0x0020       | 1     |
;|  2 | $once_1_TCY_T5m                                   	|   1 bit   | 0x0020       | 2     |
;|  3 | RDigito                                           	|   1 bit   | 0x0020       | 3     |
;|  4 | $once_2_TCY_T1s                                   	|   1 bit   | 0x0020       | 4     |
;|  5 | $once_3_CTU_Ccount3                               	|   1 bit   | 0x0020       | 5     |
;|  6 | $parThis_0                                        	|   1 bit   | 0x0020       | 6     |
;|  7 | R3s                                               	|   1 bit   | 0x0020       | 7     |
;|  8 | $scratch                                          	|   1 bit   | 0x0021       | 0     |
;|  9 | $parThis_1                                        	|   1 bit   | 0x0021       | 1     |
;| 10 | $parThis_2                                        	|   1 bit   | 0x0021       | 2     |
;| 11 | $parThis_3                                        	|   1 bit   | 0x0021       | 3     |
;| 12 | $parThis_4                                        	|   1 bit   | 0x0021       | 4     |
;| 13 | $parOut_0                                         	|   1 bit   | 0x0021       | 5     |
;| 14 | $parThis_5                                        	|   1 bit   | 0x0021       | 6     |
;| 15 | $once_4_FMTD_STR                                  	|   1 bit   | 0x0021       | 7     |
;| 16 | $fmtd_3_doSend                                    	|   1 bit   | 0x0022       | 0     |
;| 17 | $fmtd_2_isLeadingZero                             	|   1 bit   | 0x0022       | 1     |
;| 18 | $once_5_FMTD_STR                                  	|   1 bit   | 0x0022       | 2     |
;| 19 | $fmtd_7_doSend                                    	|   1 bit   | 0x0022       | 3     |
;| 20 | $fmtd_6_isLeadingZero                             	|   1 bit   | 0x0022       | 4     |
;| 21 | $Y_INTCON_T0IF                                    	|   1 bit   | 0x0022       | 5     |
;| 22 | $overflow                                         	|   1 bit   | 0x0022       | 6     |
;| 23 | ROverflowFlagV                                    	|   1 bit   | 0x0022       | 7     |

